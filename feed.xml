<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-08-11T09:25:43+08:00</updated><id>/</id><title type="html">BLOG|LEXUGE</title><subtitle>即使被全世界孤立，也要一个人笑得精彩！</subtitle><entry><title type="html">关于『地震不是由爆炸引起的』证明</title><link href="/jekyll/update/2017/08/10/%E5%85%B3%E4%BA%8E-%E5%9C%B0%E9%9C%87%E4%B8%8D%E6%98%AF%E7%94%B1%E7%88%86%E7%82%B8%E5%BC%95%E8%B5%B7%E7%9A%84-%E8%AF%81%E6%98%8E.html" rel="alternate" type="text/html" title="关于『地震不是由爆炸引起的』证明" /><published>2017-08-10T23:14:00+08:00</published><updated>2017-08-10T23:14:00+08:00</updated><id>/jekyll/update/2017/08/10/%E5%85%B3%E4%BA%8E%E3%80%8E%E5%9C%B0%E9%9C%87%E4%B8%8D%E6%98%AF%E7%94%B1%E7%88%86%E7%82%B8%E5%BC%95%E8%B5%B7%E7%9A%84%E3%80%8F%E8%AF%81%E6%98%8E</id><content type="html" xml:base="/jekyll/update/2017/08/10/%E5%85%B3%E4%BA%8E-%E5%9C%B0%E9%9C%87%E4%B8%8D%E6%98%AF%E7%94%B1%E7%88%86%E7%82%B8%E5%BC%95%E8%B5%B7%E7%9A%84-%E8%AF%81%E6%98%8E.html">&lt;ul&gt;
  &lt;li&gt;【地理学】&lt;br /&gt;
1.碳循环和河流没有多大关系，参见wikipedia条目碳循环【1】&lt;br /&gt;
&lt;br /&gt;
2.”先回答，汇聚一起的碳元素是地球内部固有，还是外部河流运移造成的，或还有其他原因？”&lt;br /&gt;
答：地球固有，参见wikipedia条目核合成【2】&lt;br /&gt;
原因：恒星核合成发生在恒星演化过程中的恒星，经由核聚变的过程负责形成从碳到钙的元素。恒星是将氢和氦聚变成更重元素的核子炉，在温度比太阳低的恒星内进行质子-质子链反应，比太阳热的恒星进行碳氮氧循环。&lt;br /&gt;
地球上的碳元素是原始行星发出的可以衰变为碳元素的元素到地球之后再衰变为碳元素从而形成的。&lt;br /&gt;
太阳也不可以生成碳元素，只能生成氢元素之类的元素，而地球更是连氢元素也生成不了。所以不难得出，生物的能量无法生成碳元素。&lt;br /&gt;
换句话说：&lt;br /&gt;
元素不能从恒星內部或核反应堆以外的地方生成。地球固有的碳元素来自于元素衰变。&lt;br /&gt;
&lt;br /&gt;
所以，由生物生成碳，或者其他种种方式产生后再用河流运入地下（河流运入这个说法前面已经说了是不可考的）是不正确的。这些都是地球固有碳经过碳循环的结果。&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;【数学】&lt;br /&gt;
『计算内容』：日本2011年（平成23年）3月11日东北地方太平洋近海地震【3】&lt;br /&gt;
【以下步骤相对独立，没有先后】&lt;br /&gt;
&lt;br /&gt;
1.日本天然气储量全部爆炸后的相当于多少爆炸当量？&lt;br /&gt;
日本天然气储量为：357亿立方米（35.7 bcm），数据来源【4】&lt;br /&gt;
我们按照38/4200的比率折合为TNT爆炸当量（吨），为323000000.0（吨）&lt;br /&gt;
计算表达式：357*pow(10,8)/4200*38&lt;br /&gt;
&lt;br /&gt;
另：如果数据是之前总计，数据是29亿立方米（2.9 bcm）数据来源【5】&lt;br /&gt;
我们按照38/4200的比率折合为TNT爆炸当量（吨），为26238095.23809524（吨）&lt;br /&gt;
计算表达式：29*pow(10,8)/4200*38&lt;br /&gt;
&lt;br /&gt;
 2.日本2011年（平成23年）3月11日东北地方太平洋近海地震直接转换为TNT当量为多少？&lt;br /&gt;
 按照log10 E=4.8+1.5M（焦耳）的能量计算公式【6】&lt;br /&gt;
我们可以转换为：E=10^(4.8+1.5) （焦耳）代入得：2.818382931264449e+18 （焦耳）&lt;br /&gt;
计算公式为：pow(10,4.8+1.5*9.1)&lt;br /&gt;
现在我们将能量转换为TNT当量（不考虑地震波，因为这就足够了）&lt;br /&gt;
按照一吨TNT4.184×10^9 J的能量【7】计算 可以得到：673609687.2046962（吨）&lt;br /&gt;
计算公式：2.818382931264449e+18/4.184/pow(10,9)&lt;br /&gt;
&lt;br /&gt;
 3.计算9.1级地震需要多少的天然气？&lt;br /&gt;
按照log10 E=4.8+1.5M（焦耳）的能量计算公式【6】&lt;br /&gt;
我们可以转换为：E=10^(4.8+1.5) （焦耳）代入得：2.818382931264449e+18 （焦耳）&lt;br /&gt;
计算公式为：pow(10,4.8+1.5*9.1)&lt;br /&gt;
现在我们按照一立方米天然气38M（焦耳）的能量将能量转换为体积，得到：74167971875.38023（立方米）&lt;br /&gt;
计算表达式：2.818382931264449e+18/38/pow(10,6)&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
【结论】 将1和2进行对比：&lt;br /&gt;
将323000000.0（吨）『或26238095.23809524（吨）』和673609687.2046962（吨）对比，得到——就算整个日本的天然气全部进行爆炸，也不可能支持这一场地震的能量，而日本又前后发生了大量7.0级以上的特大地震。&lt;br /&gt;
所以，『地震是由爆炸引起』的理论通过数学计算可得出是错误的。&lt;br /&gt;
&lt;br /&gt;
将3和大概数据对比：&lt;br /&gt;
如果大概数据是357亿立方米（35.7 bcm），数据来源【4】- 3的结论是大概数据的2倍。&lt;br /&gt;
如果大概数据是数据是29亿立方米（2.9 bcm）数据来源【5】- 3的结论是大概数据的3倍。&lt;br /&gt;
通过反向证明，也可以得出『地震是由爆炸引起』的理论通过数学计算可得出是错误的。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;About IEA &amp;amp; more：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;国际能源署（英语：International Energy Agency，缩写为 IEA；法语：Agence internationale de l’énergie）是总部设于法国巴黎的国际组织，由经济合作与发展组织为应对能源危机于1974年设立。&lt;br /&gt;
国际能源署属于中立组织，数据时效性高，更新速度快，数据范围广且最为客观。『作为国内外大学论文的可靠数据来源』&lt;/li&gt;
  &lt;li&gt;在本次的数据引用中，最终数据来源是经济产业省（METI），是日本行政机关之一，同样『作为国内外大学论文的可靠数据来源』,对于日本的本土数据来说，这是最为直接和客观的。&lt;/li&gt;
  &lt;li&gt;此外，大概数据是可以用作科学计算的，只要该估计数值来源可靠且准确。详细内容参见：误差【8】和有效数字【9】
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
【引用链接&amp;amp;数据】&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;【1】&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A2%B3%E5%BE%AA%E7%92%B0&quot;&gt;Wikipedia-zh 碳循环&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;【2】&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%A0%B8%E5%90%88%E6%88%90&quot;&gt;Wikipedia-zh 核合成&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;【3】&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E5%9C%B0%E9%9C%87%E5%88%97%E8%A1%A8&quot;&gt;Wikipedia-zh 日本2011年（平成23年）3月11日东北地方太平洋近海地震&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;【4】&lt;a href=&quot;http://www.iea.org/publications/freepublications/publication/EnergyPoliciesofIEACountriesJapan2016.pdf&quot;&gt;PDF - IEA（国际能源署）2016年日本能源总览（Japan Energy Outlook 2016）&lt;/a&gt;&lt;br /&gt;
   第78页（页脚页数），DOMESTIC PRODUCTION：” According to the Ministry of Economy, Trade and Industry (METI), proven reserves
of natural gas were estimated at 35.7 bcm in March 2015.”&lt;/li&gt;
  &lt;li&gt;【5】&lt;a href=&quot;http://www.iea.org/publications/freepublications/publication/EnergyPoliciesofIEACountriesJapan2016.pdf&quot;&gt;PDF - IEA（国际能源署）2016年日本能源总览（Japan Energy Outlook 2016）&lt;/a&gt;&lt;br /&gt;
   第78页（页脚页数），DOMESTIC PRODUCTION：”Domestic production of natural gas in 2015 was 2.9 billion cubic metres (bcm),
equivalent to around 2.2 million tonnes (Mt) of liquefied natural gas (LNG). “&lt;/li&gt;
  &lt;li&gt;【6】&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E5%9C%B0%E9%9C%87%E8%A6%8F%E6%A8%A1#.E9.9C.87.E7.B4.9A.E8.88.87.E8.83.BD.E9.87.8F&quot;&gt;Wikipedia-zh 地震震级与能量换算公式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;【7】&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%88%86%E7%82%B8%E5%BD%93%E9%87%8F&quot;&gt;Wikipedia-zh 爆炸当量&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;【8】&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AF%AF%E5%B7%AE&quot;&gt;Wikipedia-zh 误差&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;【9】&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%89%E6%95%88%E6%95%B8%E5%AD%97&quot;&gt;Wikipedia-zh 有效数字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">【地理学】 1.碳循环和河流没有多大关系，参见wikipedia条目碳循环【1】 2.”先回答，汇聚一起的碳元素是地球内部固有，还是外部河流运移造成的，或还有其他原因？” 答：地球固有，参见wikipedia条目核合成【2】 原因：恒星核合成发生在恒星演化过程中的恒星，经由核聚变的过程负责形成从碳到钙的元素。恒星是将氢和氦聚变成更重元素的核子炉，在温度比太阳低的恒星内进行质子-质子链反应，比太阳热的恒星进行碳氮氧循环。 地球上的碳元素是原始行星发出的可以衰变为碳元素的元素到地球之后再衰变为碳元素从而形成的。 太阳也不可以生成碳元素，只能生成氢元素之类的元素，而地球更是连氢元素也生成不了。所以不难得出，生物的能量无法生成碳元素。 换句话说： 元素不能从恒星內部或核反应堆以外的地方生成。地球固有的碳元素来自于元素衰变。 所以，由生物生成碳，或者其他种种方式产生后再用河流运入地下（河流运入这个说法前面已经说了是不可考的）是不正确的。这些都是地球固有碳经过碳循环的结果。 【数学】 『计算内容』：日本2011年（平成23年）3月11日东北地方太平洋近海地震【3】 【以下步骤相对独立，没有先后】 1.日本天然气储量全部爆炸后的相当于多少爆炸当量？ 日本天然气储量为：357亿立方米（35.7 bcm），数据来源【4】 我们按照38/4200的比率折合为TNT爆炸当量（吨），为323000000.0（吨） 计算表达式：357*pow(10,8)/4200*38 另：如果数据是之前总计，数据是29亿立方米（2.9 bcm）数据来源【5】 我们按照38/4200的比率折合为TNT爆炸当量（吨），为26238095.23809524（吨） 计算表达式：29*pow(10,8)/4200*38 2.日本2011年（平成23年）3月11日东北地方太平洋近海地震直接转换为TNT当量为多少？ 按照log10 E=4.8+1.5M（焦耳）的能量计算公式【6】 我们可以转换为：E=10^(4.8+1.5) （焦耳）代入得：2.818382931264449e+18 （焦耳） 计算公式为：pow(10,4.8+1.5*9.1) 现在我们将能量转换为TNT当量（不考虑地震波，因为这就足够了） 按照一吨TNT4.184×10^9 J的能量【7】计算 可以得到：673609687.2046962（吨） 计算公式：2.818382931264449e+18/4.184/pow(10,9) 3.计算9.1级地震需要多少的天然气？ 按照log10 E=4.8+1.5M（焦耳）的能量计算公式【6】 我们可以转换为：E=10^(4.8+1.5) （焦耳）代入得：2.818382931264449e+18 （焦耳） 计算公式为：pow(10,4.8+1.5*9.1) 现在我们按照一立方米天然气38M（焦耳）的能量将能量转换为体积，得到：74167971875.38023（立方米） 计算表达式：2.818382931264449e+18/38/pow(10,6) 【结论】 将1和2进行对比： 将323000000.0（吨）『或26238095.23809524（吨）』和673609687.2046962（吨）对比，得到——就算整个日本的天然气全部进行爆炸，也不可能支持这一场地震的能量，而日本又前后发生了大量7.0级以上的特大地震。 所以，『地震是由爆炸引起』的理论通过数学计算可得出是错误的。 将3和大概数据对比： 如果大概数据是357亿立方米（35.7 bcm），数据来源【4】- 3的结论是大概数据的2倍。 如果大概数据是数据是29亿立方米（2.9 bcm）数据来源【5】- 3的结论是大概数据的3倍。 通过反向证明，也可以得出『地震是由爆炸引起』的理论通过数学计算可得出是错误的。</summary></entry><entry><title type="html">英雄不问出处——可你不是英雄</title><link href="/jekyll/update/2017/08/10/%E8%8B%B1%E9%9B%84%E4%B8%8D%E9%97%AE%E5%87%BA%E5%A4%84-%E5%8F%AF%E4%BD%A0%E4%B8%8D%E6%98%AF%E8%8B%B1%E9%9B%84.html" rel="alternate" type="text/html" title="英雄不问出处——可你不是英雄" /><published>2017-08-10T18:33:00+08:00</published><updated>2017-08-10T18:33:00+08:00</updated><id>/jekyll/update/2017/08/10/%E8%8B%B1%E9%9B%84%E4%B8%8D%E9%97%AE%E5%87%BA%E5%A4%84-%E5%8F%AF%E4%BD%A0%E4%B8%8D%E6%98%AF%E8%8B%B1%E9%9B%84</id><content type="html" xml:base="/jekyll/update/2017/08/10/%E8%8B%B1%E9%9B%84%E4%B8%8D%E9%97%AE%E5%87%BA%E5%A4%84-%E5%8F%AF%E4%BD%A0%E4%B8%8D%E6%98%AF%E8%8B%B1%E9%9B%84.html">&lt;h1&gt;英雄不问出处——可你不是英雄&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这几天与民科展开了激烈的论战，除了接受的教育水平低外，我还发现了许多『有趣』的社会现象。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;民科，民间科学家，一直被人鄙视的人群。指的是那些没有受过或接受不系统的专业教育的科学爱好者。这个词语本不应该作为贬义词使用。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
(一) 背景&lt;br /&gt;
这些天和我论战的是一位老干部，具体姓名我虽知道但不方便透露，是上世纪80年代的老一辈大学生，曾在上世纪末做过高中数学老师，后来在党校工作至今。很难以置信吧，出生于上世纪六十年代中期的一位党校工作者是一位民科。&lt;br /&gt;
先不说争论的是什么，我们先说说中国固有的一种有趣现象，来听一段故事：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当时可口可乐引进中国&lt;br /&gt;
北京各大报做出激烈反弹。《北京日报》的“内参”以“可口未必可乐”为题发表文章，认为国家缺少外汇，引进可口可乐浪费国家大量外汇资源。政治局常委陈云在这份内参上批示：只准卖给外国人，不准卖给中国人一瓶。其他中央领导也都圈阅了。外经贸部根据批示，只好通知北京停止内销。一夜之间，所有可口可乐都从商店的柜台里撤下来了。&lt;br /&gt;
这就是老干部对于有力的新潮势力进入或产生导致自己无法控制整个领域时的典型做法——无理由地禁止，甚至有是原因还很可笑：
有一个地方的卫生部门提出，“可口可乐含有咖啡因，不符合卫生要求。”他们的根据是，东北一个研究所给白鼠喂了可口可乐之后，白鼠十分兴奋。
最后是中粮公司有理由据地反驳才让中央信服，继续销售可口可乐。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一段故事说的其实就是原先主导某个领域地老干部无法忍受新势力进入使他丧失对这个领域的控制，从而无端的禁止的现象。
换在科研界——不断有新的研究生、博士等高材生从国外回来，带来新的理论，而这些理论干部无法接受。在长期国外学术领先的情况下，很难在中国禁止一切学术期刊。所以，干部们就换了一种方式——向大众洗脑。&lt;br /&gt;
2013～2014年期间，民科在科学网极度盛行，ID多为XX老翁，XX居士这样的。而这些民科多数是我国的老干部。他们批评国人崇尚西方自然科学，推出了“东方科学”之类的概念。这种路线的民科其实都是失意退休老人，还很可能是高校教职工。因为90年代到2000年77、78届的优秀国外留学生回国，改变了我国高校的现状，从那时起开始讲求SCI，科学研究也不再闭门造车，而是迅速跟国际接轨，所以有一部分老教工的老本不够吃，他们会看到学校和学院大量向这种新人牛人倾斜，自己则悻悻退休，抑郁成症，所以才成为这样的民科。他们明面上是批判“西方科学”，实际上心里是在鄙视那些国外回来，纠正我国科研状况，主导了科研的主流的“官科”们。他们提出的“东方科学”也及其可笑——诸如『量子佛学』之类的书籍不在少数。将佛教和被曲解了的科学搭配在一起。&lt;br /&gt;
更为有趣的是，他们所宣传的『东方科学』还有大批民众相信，虽然民众们看不懂，但是搭配上专业的科学名词，让人觉得权威，可靠。加之“老祖宗”，“东方文化”之类的词语更是激发了民众内心的先贤崇拜。使得人们不得不信服。&lt;br /&gt;
可以说，这是『看似科学的谣言』的祖先。
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
（二）细节&lt;br /&gt;
这位老干部的观点是什么呢？他认为：『地球上的生物体内含有的碳元素在生物死亡之后被释放，由河流进入地球内部，然后变为天然气、瓦斯气体、煤炭等。这些物质越积越多，最后爆炸使他们的能量释放，形成了地震』。这就是他的观点，简单的说就是地震是由天然气之类的爆炸引起的。&lt;br /&gt;
如果我不事先知道是民科，乍看我可能真的会相信。但是稍微对地理学的知识进行涉及，就会发现许多问题——比如：碳元素是地球固有的，生物碳是生物在碳循环过程中将地球固有的碳元素吸收。爆炸真的能产生这没大的能量？为什么煤矿图与地震分布图不同？这一切实际上都是疑点。&lt;br /&gt;
我曾试图和它说过一会理，但是他却对一段已经被我整段反驳的措辞执迷不悟。很具有戏剧性的是，这段内容还是一段『不相干谬论』，到处充满『红鲱鱼』和『稻草人』。简述一下：他认为人在循环，会排泄，同时，地球和人应该有相似之处，所以地球在碳循环（他终于承认碳循环了）也会排泄（地震）。&lt;br /&gt;
实际上，碳循环并不是生命循环，谈和相似。&lt;br /&gt;
很快，我就意识到和一个不会地理学且不肯看的人说地理没有用。所以我决定进行数学演算，按照他的理论和现实数据来进行计算，看看能不能得到现实的结果。&lt;br /&gt;
第一次，我采用的是镇海的例子，但是计算错误了。随后我又使用了四川，但是有一个细节没有考虑全。&lt;br /&gt;
这些都是我的失误，我也就没说什么。第三次，我采用日本作为例子，进行了三层校验，没有任何的计算失误。但是，这次却被意想不到的驳回——说我第一次的数据引用的不可考。我引用的是CIA世界概况。鉴于CIA是美国政府机构，数据不客观也在质疑的情理之中。所以我几经周折，使用了国际能源署（IEA）的权威数据。总想着这次是中立的权威数据，应该是无可置疑的。&lt;br /&gt;
后面他就说了一个让人愤怒而啼笑皆非的理由：『你的数据是统计数据，不是科学数据，不能用作科学计算』。后面还用了一堆粗俗的语言。很难想象一个老干部会有这般的胡闹。&lt;br /&gt;
我的数据是IEA取自METI（日本经济产业省）的，是METI测量的，与实验室实验测量的数据根本上是没有区别的。况且地理学测量很难像物理学一样精准，数据的有效数字和误差就是那个水平，是可以作为计算依据的。&lt;br /&gt;
为了让他彻底心服口服，我按照地震级数反推天然气数量，结果更是与他的理论相差甚远。&lt;br /&gt;
这是我的&lt;a href=&quot;/jekyll/update/2017/08/10/关于-地震不是由爆炸引起的-证明.html&quot;&gt;证明&lt;/a&gt;。&lt;br /&gt;
这下，他不再对计算置评，而转而抛出更为可笑的事：
『他否定板块学说，引用的是“真理居士”的文章』且不说文章的可笑。既然你否认，那就得拿出新的可自洽，符合范式，能说明客观事实的理论来。后来的他连理论都没有，净贴那篇文章……』&lt;br /&gt;
最后虽是自己知道被反驳的完全无理，但还是有劲没劲地自我安慰。&lt;br /&gt;
再后来开始预测地震……
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
（三）总结&lt;br /&gt;
这次反驳民科的经历其实揭露了许多有趣而深刻的社会道理，其实也是反映出社会教育层面的一些问题。&lt;br /&gt;
首先，这让我意识到，民科并不是缺少专业知识，而是缺乏科学素养，这是十分可怕的。&lt;br /&gt;
科学素养是什么？说到底就是敢于质疑也敢于接受别人的见解。但是民科呢？根本不具有科学素养，闹出很多啼笑皆非的事情来：比如：『我的理论在你的实验里是错的，那一定是你的实验做错了，我的理论一定是对的；还有，我为什么要听你的，你的科学整个都是错误的，但是自己却又提不出个半点理论来，更不用说自洽了……』&lt;br /&gt;
如果一个民科有了科学素养，那他一定能够接受别人的见解，同时也敢于质疑。这样的人一定不会成为民科。&lt;br /&gt;
我一向不反对推翻，但是推翻之后你得提出，且得有依据的提出。很多时候，与民科之间的学术讨论往往会变成吵架的原因就是民科的蛮不讲理。&lt;br /&gt;
关于民科，就是这样，现在我们来说一下基础教育。&lt;br /&gt;
&lt;br /&gt;
我一直认为教育的中心思想应该培养的就是学生的思辨精神，能质疑也可接受。最佳的状态就是能在两者之间完美权衡，这样的学生无论在怎样的学习内容、环境面前都可以游刃有余。当然，事实上并不是这样的，偏向总是存在的。但是极端一定会导致严重的问题。举两个例子：&lt;br /&gt;
民科：严重偏向于质疑，还自认为是西式化的先进表现，虽然西方的教育一直强调质疑，但是并不意味着没有接受的过程，不接受又何谈质疑？&lt;br /&gt;
传统：严重偏向接受，尽管这样的学生或人已经很少了，但是严重偏向接受只会让人变成『会说话的电脑』。&lt;br /&gt;
这两个反面例子可以看出瘸腿的后果。&lt;br /&gt;
这就是我对基础教育的核心看法。&lt;br /&gt;
&lt;br /&gt;
最后再来说说老干部文化。可以说这是中国独有的文化，也是中国学术界中『污浊教授』老后的再升级。不过也无可厚非，只有那些目的不纯的学术研究者才会抛弃科学的大船转而利用各种逻辑谬论对大众洗脑，因为他们的眼中是永远的金钱与利益。学术界怎么样，中国怎么样，中国学术界怎么样他并不在乎，他只在乎能不能坐稳这个位，收稳这个钱。可能这也是中国学术界之前声誉不好的原因吧。&lt;br /&gt;
&lt;br /&gt;
就是这样，记住，社会中的人渣一定存在，只要自己follow the master就可以了，不用关系人渣的命运，你也不可能从人渣那里汲取什么。无论谁怎么说，地球，宇宙总会按照着原本的样子运转着。&lt;/p&gt;</content><author><name></name></author><summary type="html">英雄不问出处——可你不是英雄 这几天与民科展开了激烈的论战，除了接受的教育水平低外，我还发现了许多『有趣』的社会现象。</summary></entry><entry><title type="html">幕后 第四章</title><link href="/jekyll/update/2017/08/06/%E5%B9%95%E5%90%8E-%E7%AC%AC%E5%9B%9B%E7%AB%A0.html" rel="alternate" type="text/html" title="幕后 第四章" /><published>2017-08-06T11:05:00+08:00</published><updated>2017-08-06T11:05:00+08:00</updated><id>/jekyll/update/2017/08/06/%E5%B9%95%E5%90%8E%20%E7%AC%AC%E5%9B%9B%E7%AB%A0</id><content type="html" xml:base="/jekyll/update/2017/08/06/%E5%B9%95%E5%90%8E-%E7%AC%AC%E5%9B%9B%E7%AB%A0.html">&lt;h1&gt;幕后 第四章&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
坐标：美国-华盛顿·哥伦比亚特区-五角大楼 地球纪元2033年冬&lt;br /&gt;
最终，汤姆·惠灵顿方面决定采用曲速引擎作为最终的解决方案。但是这也具有极大的风险，毕竟，曲速引擎的理论还为得到过完全验证，如果出点闪失，整个舰队都有可能回不来，当然地球也是，因为引擎方面全都是北约与泛亚太联盟在负责。&lt;br /&gt;
实际上，全人类只有一次机会，要是行动不完美，曲速引擎如此进行空间折叠一会被GN-z11文明发现，这个时候可能真的没有机会了。所以北约希望这一仗能够打得出其不意，也唯有如此。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
坐标：美国-俄亥俄州空军基地 地球纪元2033年冬&lt;br /&gt;
今天，是曲速引擎进行总装和地面试验的日子。美军提前花费了1个月的时间用概率云把整个基地包裹得严严实实。同时在外大量驻军。曲速引擎实际上并不是一个单纯的推进器，它需要将空间进行折叠，这才是技术的关键。这次，马克·瑟里奇和汤姆他们专门设置了一堆装置来进行空间折叠。这些装置将被铺装在舰队的表面，就像20世纪末美军的隐形涂料一样，受舰船的控制，来对周围的时空进行扭曲、折叠。而最后的推进器只不过是普通的核聚变推进器而已。&lt;br /&gt;
冬日的俄亥俄，大雪纷飞，却终究抵不住寂寞。如今虽是大雪依旧，但是当年下雪时的欣喜已断然全无，当年下雪时的心情也回不来了。&lt;br /&gt;
亚瑟三人在冰天雪地里坐着，等待着工程师们的总装，也开始怀念现在的地球。终于，他们躺在雪地里，全身陷进松软的雪堆，对着灰蒙蒙的天空不住发呆，痴痴地望着，什么都不去想，三人都不愿相信这个世界是假的，至少这一刻，他们的心是真实的。未来要开启的征程，至少要让自己真实存在过。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
坐标：中国东北-黑龙江鸭绿江沿岸某村庄 地球纪元2033年冬&lt;br /&gt;
同样是大雪纷飞，这一年的冬天对于陆家来说没有什么不寻常的地方。但是或许陆家是唯一几家“坚守”在这个村庄。出于被迫的“坚守”。村里其余的人家大都搬去城里镇上住了。就算其他几家还在的，年轻人也都外出去打工了。&lt;br /&gt;
唯独陆家几个年轻人很不争气，个个都屯在家中，啥事情也不干。以前其他几家的老人和年轻人们总对他们议论纷纷，后来也就都习惯了。&lt;br /&gt;
这三个年轻人分别是：陆宇航，陆峰和陆昂。三个人整日要么是热在炕上玩手机，要么是有一阵没一阵的在鸭绿江冰面上闲晃，逛累的时候就喝小贩从老毛子那走私来的便宜烈酒。实际上是伏特加，但是质量极差，酒除了烈就没别的了，喝下去整个人简直就要烧起来。三个人喝酒喝混了，深一脚浅一脚地在雪地上走会家。整日悠闲是悠闲，日子却是过的天昏地暗，看见哥三个，脸上蒙着一层猪油似的困意。&lt;br /&gt;
陆宇航，当年高考落榜，回家，也不跟着父母务农狩猎，就颓废丧志。陆峰从小就好着狩猎，整天和傻狍子玩，脑袋里恐怕也就装着些许对付狍子的傻办法。不过，三个人因为有了个打猎好手，也就不愁吃肉问题。陆昂，曾经被家里抱有众望的一子，虽说高考是考上了，但是也是混得一个三本的垃圾大学，瞒着家里人三本也至少算是大学，总比老大落榜好，就交了学费。大学里也就学着富二代吃喝玩乐，四年下来，可谓是半点机灵都没学会。回了家可是连打狍子都不会了。&lt;br /&gt;
最可怕的是老大还天天做着发财的美梦，周围的人都嘲笑他说简直不可能，确实，按照老大现如今的自身水平和周围环境，还真是不可能。为了生计，每日，老大和老二都会去打狍子，留一只自己吃，其余的去卖了买酒喝。&lt;/p&gt;

&lt;h2 id=&quot;未完待续&quot;&gt;未完待续&lt;/h2&gt;</content><author><name></name></author><summary type="html">幕后 第四章 坐标：美国-华盛顿·哥伦比亚特区-五角大楼 地球纪元2033年冬 最终，汤姆·惠灵顿方面决定采用曲速引擎作为最终的解决方案。但是这也具有极大的风险，毕竟，曲速引擎的理论还为得到过完全验证，如果出点闪失，整个舰队都有可能回不来，当然地球也是，因为引擎方面全都是北约与泛亚太联盟在负责。 实际上，全人类只有一次机会，要是行动不完美，曲速引擎如此进行空间折叠一会被GN-z11文明发现，这个时候可能真的没有机会了。所以北约希望这一仗能够打得出其不意，也唯有如此。 坐标：美国-俄亥俄州空军基地 地球纪元2033年冬 今天，是曲速引擎进行总装和地面试验的日子。美军提前花费了1个月的时间用概率云把整个基地包裹得严严实实。同时在外大量驻军。曲速引擎实际上并不是一个单纯的推进器，它需要将空间进行折叠，这才是技术的关键。这次，马克·瑟里奇和汤姆他们专门设置了一堆装置来进行空间折叠。这些装置将被铺装在舰队的表面，就像20世纪末美军的隐形涂料一样，受舰船的控制，来对周围的时空进行扭曲、折叠。而最后的推进器只不过是普通的核聚变推进器而已。 冬日的俄亥俄，大雪纷飞，却终究抵不住寂寞。如今虽是大雪依旧，但是当年下雪时的欣喜已断然全无，当年下雪时的心情也回不来了。 亚瑟三人在冰天雪地里坐着，等待着工程师们的总装，也开始怀念现在的地球。终于，他们躺在雪地里，全身陷进松软的雪堆，对着灰蒙蒙的天空不住发呆，痴痴地望着，什么都不去想，三人都不愿相信这个世界是假的，至少这一刻，他们的心是真实的。未来要开启的征程，至少要让自己真实存在过。 坐标：中国东北-黑龙江鸭绿江沿岸某村庄 地球纪元2033年冬 同样是大雪纷飞，这一年的冬天对于陆家来说没有什么不寻常的地方。但是或许陆家是唯一几家“坚守”在这个村庄。出于被迫的“坚守”。村里其余的人家大都搬去城里镇上住了。就算其他几家还在的，年轻人也都外出去打工了。 唯独陆家几个年轻人很不争气，个个都屯在家中，啥事情也不干。以前其他几家的老人和年轻人们总对他们议论纷纷，后来也就都习惯了。 这三个年轻人分别是：陆宇航，陆峰和陆昂。三个人整日要么是热在炕上玩手机，要么是有一阵没一阵的在鸭绿江冰面上闲晃，逛累的时候就喝小贩从老毛子那走私来的便宜烈酒。实际上是伏特加，但是质量极差，酒除了烈就没别的了，喝下去整个人简直就要烧起来。三个人喝酒喝混了，深一脚浅一脚地在雪地上走会家。整日悠闲是悠闲，日子却是过的天昏地暗，看见哥三个，脸上蒙着一层猪油似的困意。 陆宇航，当年高考落榜，回家，也不跟着父母务农狩猎，就颓废丧志。陆峰从小就好着狩猎，整天和傻狍子玩，脑袋里恐怕也就装着些许对付狍子的傻办法。不过，三个人因为有了个打猎好手，也就不愁吃肉问题。陆昂，曾经被家里抱有众望的一子，虽说高考是考上了，但是也是混得一个三本的垃圾大学，瞒着家里人三本也至少算是大学，总比老大落榜好，就交了学费。大学里也就学着富二代吃喝玩乐，四年下来，可谓是半点机灵都没学会。回了家可是连打狍子都不会了。 最可怕的是老大还天天做着发财的美梦，周围的人都嘲笑他说简直不可能，确实，按照老大现如今的自身水平和周围环境，还真是不可能。为了生计，每日，老大和老二都会去打狍子，留一只自己吃，其余的去卖了买酒喝。</summary></entry><entry><title type="html">象印杭州</title><link href="/jekyll/update/2017/08/05/%E8%B1%A1%E5%8D%B0%E6%9D%AD%E5%B7%9E.html" rel="alternate" type="text/html" title="象印杭州" /><published>2017-08-05T14:03:00+08:00</published><updated>2017-08-05T14:03:00+08:00</updated><id>/jekyll/update/2017/08/05/%E8%B1%A1%E5%8D%B0%E6%9D%AD%E5%B7%9E</id><content type="html" xml:base="/jekyll/update/2017/08/05/%E8%B1%A1%E5%8D%B0%E6%9D%AD%E5%B7%9E.html">&lt;h1&gt;象印杭州&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/杭州-鸟.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;杭州，一个静与动的完美结合；一段现代与古代的姻缘；一处自然与发展融洽相处的圣地。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;（一）浙江省博物馆&lt;/center&gt;
&lt;p&gt;浙江省博物馆与杭州其他许多的博物馆坐落在一个广场。我十分赞赏这种设计。博物馆，作为历史的诉说者，也作为城市的名片。从人类的出现到近代历史，浙江省博物馆很好地讲述着这一切，并且保有着十大镇馆之宝。用藏品和文字一步步揭开千年来的历史面纱，其中包括玉琮在内的珍品，都标志着人类文明的一次又一次的进步。从浙江作为全国文化的中心到浙江的衰落，再到兴起，无不向人类诉说着杭州的历史变迁、人文情怀。&lt;/p&gt;
&lt;center&gt;（二）灵隐古刹&lt;/center&gt;
&lt;p&gt;清泉潺潺，古树斜倚，一旁“飞来山上千寻塔”，一旁千年古刹禅意深。灵隐寺坐落在西湖的西北面，靠山面山，是江南禅宗“五山”之一。由西印度僧人慧理修建。曾经与灵隐寺一同诞生的有五座古刹，但是都不同程度的被破坏和捣毁。现如今只剩下灵隐寺这唯一的一座了。清乾隆帝曾亲笔赐名“云林禅寺”。现如今的灵隐寺有着络绎不绝的香客、游客，欣然接受着天底下善男信女的虔诚。灵隐寺这一座千年古刹经历了一代又一代的兴衰，曾经面临过寺毁僧散的厄运，也曾兴盛至极，成为乾隆下江南的必经之所。我学着当年乾隆在山顶古泉用泉水洗手，品龙井，再到灵隐寺静心参禅。品位茶与佛与禅三者和一的境界。&lt;/p&gt;
&lt;center&gt;(三)浙江大学&lt;/center&gt;
&lt;p&gt;浙大，是杭州也是浙江省内最好的大学之一。这次我造访的是浙江大学数个校区中历史最悠久的玉泉校区。玉泉校区很有百年老校的风貌。此时的浙大，正好处于120周年校庆之际。校区内的建筑都是红砖瓦修葺而成。采用三角形的尖顶。很有民国建筑风格。青色的爬山虎爬遍了整堵墙。满地长着绿色植物，高及脚踝。校园的路边都种着大树，似乎是白杨或是垂柳，遮着半边天。从校门口望去就可以看到毛泽东挥手的铜像。我来时，正好天空有几番下雨的意思。阴云密布，铜像在此之中，恰似一番拨云见日的意象，别有一番趣味与威严。&lt;br /&gt;
校区似乎修在斜坡之上。在学校中骑着自行车，可以看到许多名人募捐修建的建筑，如：邵逸夫体育馆。作为一座百年名校，浙大可能是我到过的最有学术气氛的大学。加之杭州深厚的文化底蕴，更是一所独一无二的大学。&lt;/p&gt;
&lt;center&gt;（四）西湖印象 &lt;/center&gt;
&lt;p&gt;来到杭州就不得不提及西湖。杭州之美，美离不开自然景致，却也少不了人文风韵。如果西湖失去文化色泽，那它的自然风光估摸着只能算得上是一公园罢。大不及太湖，深不及钱湖。但是白居易与苏轼相继来此做官为政，并为西湖的历史涂抹上浓重的一笔。以及历来文人骚客的诗词歌赋加之民间传说，使得西湖——虽不及太湖之大，却诗篇众多；虽不及钱湖之深，但白苏二人却对她一往情深。&lt;br /&gt;
苏堤，是苏轼在治理西湖时用湖泥堆积而成。留下“水光潋滟晴方好，山色空蒙雨亦奇”的完美比喻。白堤，为储蓄湖水灌溉农田而建，原名白沙堤，白居易曾作有“最爱湖东行不足，绿杨阴里白沙堤”抒发情怀。
游船环湖一周,我拂着迎面吹来的风，看着三潭映月，苏堤白提，如今的游人如织，看着雷峰塔以及回荡在空中的传说，再看看西湖四周现代化的建筑。一种古今交织的错觉出现在我的脑海中，奇妙而美好，这就是杭州的感觉，杭州的印象。&lt;/p&gt;</content><author><name></name></author><summary type="html">象印杭州 杭州，一个静与动的完美结合；一段现代与古代的姻缘；一处自然与发展融洽相处的圣地。</summary></entry><entry><title type="html">我的Coding之路</title><link href="/jekyll/update/2017/08/01/%E6%88%91%E7%9A%84Coding%E4%B9%8B%E8%B7%AF.html" rel="alternate" type="text/html" title="我的Coding之路" /><published>2017-08-01T16:03:00+08:00</published><updated>2017-08-01T16:03:00+08:00</updated><id>/jekyll/update/2017/08/01/%E6%88%91%E7%9A%84Coding%E4%B9%8B%E8%B7%AF</id><content type="html" xml:base="/jekyll/update/2017/08/01/%E6%88%91%E7%9A%84Coding%E4%B9%8B%E8%B7%AF.html">&lt;h1&gt;我的Coding之路&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/programmer-min.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
       从小，我就对人工的，机械的事物感兴趣。提起编程，就可以追溯到我与机器人的渊源。小时候，还是处于对看得见，摸得着的东西比较感兴趣。从搭积木开始一步步接触到可编程主机。为了操控主机就势必得对它进行编程。当然，是拖动模块的图形化编程。十分好理解，但是限制也非常多。此外，要是程序一大，逻辑一复杂，就会很难更改和调试。&lt;br /&gt;
       这个时候我已经是小学三年级。偶尔听闻到学校有编程社团，以为也和图形化编程一般，不以为然。到了小学四年级，抱着看一看的心态，我进入了编程社团。我的第一门编程语言是Pascal，使用的IDE是FPC，记得版本是2.0.4（当然不是当时的最新版本）。&lt;br /&gt;
       我学起来很快，但是学校每星期一节的社团实在是不能让我学到什么。教起来拖沓迭代。也是四年级的暑假，我参加了区里的编程集训，这个夏令营虽然在现在看来没有教会我太多，但是醍醐灌顶地帮助我打下了基础，是不可或缺的。我对编程本身是真的有兴趣的，而绝非是对游戏或者电脑，在此期间，我会用每天新教的知识一步步搭建出一个游戏。这个游戏应该是我的第一个真真意义上可以玩的游戏，名字叫《星舰城市》。游戏做得是十分粗糙，不能存档，互动方式为“一问一答”……可以说缺点无数。这个游戏的源代码和可执行文件也已经丢失，无处可觅。但是这个游戏确实对我有划时代意义，很遗憾没能留下，它可以相当一些大一新生的游戏编程水平。&lt;br /&gt;
       随后，我又开发过一款游戏，名叫《二战风云》。想比起星舰城市，界面更为友好，采用了重新输出的方式来展现动画。虽说帧率低下，很晃眼睛，但是却也算是一个进步。这款游戏夭折，是我人生的第一场数据危机——当时，我又一个U盘，代码和可执行文件就只在U盘中有，到哪里就插上U盘开始编程，可谓十分方便。但是我对U盘的牢固性却疏忽了。一次，我的膝盖稍微一撇，把机箱上的U盘给撇断，我当时就傻了。整个人一怔，我的同班同学——当时帮我开发这个游戏的武器“数据库”，连忙帮我百度如何解决。可惜，因为物理损伤，已经没有任何挽回的余地了。大概出于对劳动付诸东流的悲痛，我的同学直呼我是骗子，而我也同样痛不欲生。&lt;br /&gt;
       此后是编程道路上略带黑暗色彩的时期。记得是某一年的五一节，我和我的同学被报上了一个编程培训班，老师据说是宁波市名师。事实上，第一节课开始，我对他的印象就不佳。&lt;br /&gt;
       当时在讲排序算法，在介绍选择排序的时候，老师直接打开画图，写上几个数字：“你们看，1小于3，所以把1放到这里。”讲了半天，我觉得只是人工执行一遍程序，也许是老师表达不出来。训练了半年，我的算法翻译（就是把步骤转化为代码）能力倒是得到了显著提升，这是在为未来成为码农做准备（苦笑）。当然，每一个接触编程的人最开始都会对枯燥的算法产生抵触情绪。而不幸的是，我恰恰是那种必须彻底理解才能牢记的人。这对我快速学习编程也是不利的。最让我发指的是，这里的人背离了我的原则，他们根本不热爱编程，也有着虚伪的人格，他们把编程当作升学的推进器，但是，这些人在升学之后又能学会什么？甚至有人问我：一年学编程能拿奖吗？我的答案是：不能也不要。我觉得，为了升学而学习自己不喜欢的东西还不如不学，这花费的时间和金钱比升学本身的价值更多。总之，我觉得这个培训班将近一年半的时间内，我学得并不舒服。&lt;br /&gt;
       在这一年半的时间里，我对外的探索也从未停止过。我学习了一门新语言——C，有了第一台自己的笔记本（虽然配置不佳）。我学习C的过程中，也受到过老师的批评，但是我并没有停止。如果我停下了，那今天我所有的项目都是不存在的。其中，有我至今还在支持的项目。比如GAMEOX和LEDIT。都是我在那时候开始写的。值得一提的是，我当时使用的是Turbo C作为IDE，而且还固执地认为Turbo C十分不错。的确，我在转到Linux之前都是那么认为的。这就牵扯到编程观念的变化，暂且不说。&lt;br /&gt;
       GAMEOX是同学之间流行的纸笔游戏的电子版本，当时功能十分简陋，不能判断胜负，只能算是一个电子棋盘。当时也只打算开发到这种程度。但是奈何有太多想法涌现，开始大规模的开发，开发总是一阵一阵的，而且出于强迫症，总会在一个功能没有BUG的情况下再开发下一个功能。所以我所有用C语言编写的项目都具有强劲的异常处理容错能力。不论用户输入什么，都不会轻易异常。（在此吐槽一下现在国内的软件、电器厂商，产品都是做到“能用”，随便乱按几下就会主板失效，做电子产品就是要皮实，不论是硬件还是软件）自己编写LEDIT时经常会出现莫名其妙的问题——比如光标乱跳，文字在上一行显示，光标却在下一行，方向键随便按一下就内存溢出。但是都被我一个个解决了，这个项目也代表着我当时的最高水平。&lt;br /&gt;
       时间很快来到了六年级的暑假。这是一个意义重大的时期，我来到了Linux平台。事实上，我对Linux系统很早就有耳闻。但是我却不敢去尝试，因为四五年级的时候我没有安装过操作系统，我也仅有这一台电脑，要是装坏了可真的神仙也无奈。
但是，我终究是忍不住的。所以，我开始在虚拟机中尝试。很快，摸清楚套路后决定在真机上尝试。为了避免双系统的繁琐步骤（我在此之前安装过Ubuntu与Windows 10双系统），我一气之下把Windows给格式化了，从此我就再也没有回到过Windows。我的第一个Linux发行版是Fedora，的确，这是一个优秀个发行版。慢慢的，我更多的去使用shell而不是GUI，Linux带给我的感觉也非常棒。我将我的两个项目移植到了Linux上。这个时候，虽然我能模拟出Turbo C，但是我已经不再使用它了。我渐渐得更加喜欢gcc和gdb的组合。Linux带给我了开源和现代化的编程理念，是我编程道路上的重要拐点。&lt;br /&gt;
       Linux新手难免不会去尝试各种发行版本，用了Fedora三个月之后，我就准备跳槽了。Archlinux是我最喜欢的发行版，但是安装步骤完全命令行，对我很不友好。所以我决定使用Archlinux的亲戚发行版——Manjaro。它确实安装简单，但是却带有浓重的Ubuntu风味，我也不喜欢。遂我开始安装Redhat系的CentOS，但是CentOS的内核和驱动还是21世纪初的版本，无法完美驱动我的笔记本，所以，还没有到一个星期，我就又换到了Debian。Debian非常优秀，但Stable版本太陈旧，无法安装jekyll。于是我又回到了Fedora。但是，Archlinux的诱惑还是很大，我无法抵挡。终于在今年3月，我安装了。除了网络问题，还是非常顺利的，因为我已经使用了有半年的Linux了。至今，我还在使用Archlinux，这是我使用时间最长的发新版。&lt;br /&gt;
       我又对LEDIT进行大量重构，使它具有现代编辑器的使用习惯。对GAMEOX加入了AI和保存以及智能判断模块。暑假，我又使用Python开发了Telegram机器人、自动拆分词根脚本、DHT爬虫等现代化的程序。Python的确强大，但是，我还是喜欢C的简洁和深沉。&lt;br /&gt;
       伴随着项目的开发，我也渐渐意识到算法的重要性，而我自己探索出来的写法和理解模式，是终身不会忘记的。&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;</content><author><name></name></author><summary type="html">我的Coding之路        从小，我就对人工的，机械的事物感兴趣。提起编程，就可以追溯到我与机器人的渊源。小时候，还是处于对看得见，摸得着的东西比较感兴趣。从搭积木开始一步步接触到可编程主机。为了操控主机就势必得对它进行编程。当然，是拖动模块的图形化编程。十分好理解，但是限制也非常多。此外，要是程序一大，逻辑一复杂，就会很难更改和调试。        这个时候我已经是小学三年级。偶尔听闻到学校有编程社团，以为也和图形化编程一般，不以为然。到了小学四年级，抱着看一看的心态，我进入了编程社团。我的第一门编程语言是Pascal，使用的IDE是FPC，记得版本是2.0.4（当然不是当时的最新版本）。        我学起来很快，但是学校每星期一节的社团实在是不能让我学到什么。教起来拖沓迭代。也是四年级的暑假，我参加了区里的编程集训，这个夏令营虽然在现在看来没有教会我太多，但是醍醐灌顶地帮助我打下了基础，是不可或缺的。我对编程本身是真的有兴趣的，而绝非是对游戏或者电脑，在此期间，我会用每天新教的知识一步步搭建出一个游戏。这个游戏应该是我的第一个真真意义上可以玩的游戏，名字叫《星舰城市》。游戏做得是十分粗糙，不能存档，互动方式为“一问一答”……可以说缺点无数。这个游戏的源代码和可执行文件也已经丢失，无处可觅。但是这个游戏确实对我有划时代意义，很遗憾没能留下，它可以相当一些大一新生的游戏编程水平。        随后，我又开发过一款游戏，名叫《二战风云》。想比起星舰城市，界面更为友好，采用了重新输出的方式来展现动画。虽说帧率低下，很晃眼睛，但是却也算是一个进步。这款游戏夭折，是我人生的第一场数据危机——当时，我又一个U盘，代码和可执行文件就只在U盘中有，到哪里就插上U盘开始编程，可谓十分方便。但是我对U盘的牢固性却疏忽了。一次，我的膝盖稍微一撇，把机箱上的U盘给撇断，我当时就傻了。整个人一怔，我的同班同学——当时帮我开发这个游戏的武器“数据库”，连忙帮我百度如何解决。可惜，因为物理损伤，已经没有任何挽回的余地了。大概出于对劳动付诸东流的悲痛，我的同学直呼我是骗子，而我也同样痛不欲生。        此后是编程道路上略带黑暗色彩的时期。记得是某一年的五一节，我和我的同学被报上了一个编程培训班，老师据说是宁波市名师。事实上，第一节课开始，我对他的印象就不佳。        当时在讲排序算法，在介绍选择排序的时候，老师直接打开画图，写上几个数字：“你们看，1小于3，所以把1放到这里。”讲了半天，我觉得只是人工执行一遍程序，也许是老师表达不出来。训练了半年，我的算法翻译（就是把步骤转化为代码）能力倒是得到了显著提升，这是在为未来成为码农做准备（苦笑）。当然，每一个接触编程的人最开始都会对枯燥的算法产生抵触情绪。而不幸的是，我恰恰是那种必须彻底理解才能牢记的人。这对我快速学习编程也是不利的。最让我发指的是，这里的人背离了我的原则，他们根本不热爱编程，也有着虚伪的人格，他们把编程当作升学的推进器，但是，这些人在升学之后又能学会什么？甚至有人问我：一年学编程能拿奖吗？我的答案是：不能也不要。我觉得，为了升学而学习自己不喜欢的东西还不如不学，这花费的时间和金钱比升学本身的价值更多。总之，我觉得这个培训班将近一年半的时间内，我学得并不舒服。        在这一年半的时间里，我对外的探索也从未停止过。我学习了一门新语言——C，有了第一台自己的笔记本（虽然配置不佳）。我学习C的过程中，也受到过老师的批评，但是我并没有停止。如果我停下了，那今天我所有的项目都是不存在的。其中，有我至今还在支持的项目。比如GAMEOX和LEDIT。都是我在那时候开始写的。值得一提的是，我当时使用的是Turbo C作为IDE，而且还固执地认为Turbo C十分不错。的确，我在转到Linux之前都是那么认为的。这就牵扯到编程观念的变化，暂且不说。        GAMEOX是同学之间流行的纸笔游戏的电子版本，当时功能十分简陋，不能判断胜负，只能算是一个电子棋盘。当时也只打算开发到这种程度。但是奈何有太多想法涌现，开始大规模的开发，开发总是一阵一阵的，而且出于强迫症，总会在一个功能没有BUG的情况下再开发下一个功能。所以我所有用C语言编写的项目都具有强劲的异常处理容错能力。不论用户输入什么，都不会轻易异常。（在此吐槽一下现在国内的软件、电器厂商，产品都是做到“能用”，随便乱按几下就会主板失效，做电子产品就是要皮实，不论是硬件还是软件）自己编写LEDIT时经常会出现莫名其妙的问题——比如光标乱跳，文字在上一行显示，光标却在下一行，方向键随便按一下就内存溢出。但是都被我一个个解决了，这个项目也代表着我当时的最高水平。        时间很快来到了六年级的暑假。这是一个意义重大的时期，我来到了Linux平台。事实上，我对Linux系统很早就有耳闻。但是我却不敢去尝试，因为四五年级的时候我没有安装过操作系统，我也仅有这一台电脑，要是装坏了可真的神仙也无奈。 但是，我终究是忍不住的。所以，我开始在虚拟机中尝试。很快，摸清楚套路后决定在真机上尝试。为了避免双系统的繁琐步骤（我在此之前安装过Ubuntu与Windows 10双系统），我一气之下把Windows给格式化了，从此我就再也没有回到过Windows。我的第一个Linux发行版是Fedora，的确，这是一个优秀个发行版。慢慢的，我更多的去使用shell而不是GUI，Linux带给我的感觉也非常棒。我将我的两个项目移植到了Linux上。这个时候，虽然我能模拟出Turbo C，但是我已经不再使用它了。我渐渐得更加喜欢gcc和gdb的组合。Linux带给我了开源和现代化的编程理念，是我编程道路上的重要拐点。        Linux新手难免不会去尝试各种发行版本，用了Fedora三个月之后，我就准备跳槽了。Archlinux是我最喜欢的发行版，但是安装步骤完全命令行，对我很不友好。所以我决定使用Archlinux的亲戚发行版——Manjaro。它确实安装简单，但是却带有浓重的Ubuntu风味，我也不喜欢。遂我开始安装Redhat系的CentOS，但是CentOS的内核和驱动还是21世纪初的版本，无法完美驱动我的笔记本，所以，还没有到一个星期，我就又换到了Debian。Debian非常优秀，但Stable版本太陈旧，无法安装jekyll。于是我又回到了Fedora。但是，Archlinux的诱惑还是很大，我无法抵挡。终于在今年3月，我安装了。除了网络问题，还是非常顺利的，因为我已经使用了有半年的Linux了。至今，我还在使用Archlinux，这是我使用时间最长的发新版。        我又对LEDIT进行大量重构，使它具有现代编辑器的使用习惯。对GAMEOX加入了AI和保存以及智能判断模块。暑假，我又使用Python开发了Telegram机器人、自动拆分词根脚本、DHT爬虫等现代化的程序。Python的确强大，但是，我还是喜欢C的简洁和深沉。        伴随着项目的开发，我也渐渐意识到算法的重要性，而我自己探索出来的写法和理解模式，是终身不会忘记的。</summary></entry><entry><title type="html">海淘初体验</title><link href="/jekyll/update/2017/07/23/%E6%B5%B7%E6%B7%98%E5%88%9D%E4%BD%93%E9%AA%8C.html" rel="alternate" type="text/html" title="海淘初体验" /><published>2017-07-23T20:31:00+08:00</published><updated>2017-07-23T20:31:00+08:00</updated><id>/jekyll/update/2017/07/23/%E6%B5%B7%E6%B7%98%E5%88%9D%E4%BD%93%E9%AA%8C</id><content type="html" xml:base="/jekyll/update/2017/07/23/%E6%B5%B7%E6%B7%98%E5%88%9D%E4%BD%93%E9%AA%8C.html">&lt;h1 id=&quot;海淘初体验&quot;&gt;海淘初体验&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/image/包裹.JPG&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这是我第一次在美国亚马逊购物，这是我第一次海淘和收到外国包裹的经历。谨以此篇记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;       我很早就听闻说国外的电商平台质量好，价格比国内便宜。而亚马逊作为国外最大的电商平台，更是早早在我心中埋下了“国外电商=亚马逊”的种子。&lt;br /&gt;
       但是对于清关、派送、支付等一系列麻烦的手续以及国际船运的慢速流程，我始终不敢下手，尽管我们已经有过许多国内的网购经历。最重要的是，每每想下单的时候，总是会在脑海中浮现出各种收不到，派送错误，扣款错误，对方未发货而联系不上的情景，宛如一盆冷水浇在我头上。&lt;br /&gt;
       不过，亚马逊的低价实在是太诱人了，特别是对于国内的一些高附加值产品，不知道是利润翻了多少倍！这一次，我看中的是ALMY Alstar的一支限量色钢笔。在实体店的价格要580RMB，但是在美国亚马逊上只要$32.06，也就是说只要220.89RMB，这意味着可以便宜一半还要多140元！要知道，220元可是连LAMY Safari也买不起的。虽说比淘宝贵20元，但是可以绝对保证是正品。所以，我决定要买这支笔。&lt;br /&gt;
       终于，我在价格和品质上说服了妈妈。但是，我也是第一次购买，心里很是没底。在填写收货地址的时候我就遇到了大麻烦，由于美国是有州以及明确的邮编(ZIP CODE)的，而且他们大多数不是住在小区中，都有自己的别墅。所以，在这么短的地址栏中如何用拼音填写详细地址，我又犯了难。最终，我决定填写为妈妈单位的地址。后面的过程很顺利，绑定了信用卡，完成了付款。&lt;br /&gt;
       但是，我很不适应的是，我付款之后，银行并没有给我发来扣款信息，以至于我都无法确认我是否购买了。带着这种疑惑与焦虑，我匆匆度过了这一天。我忐忑地等待着扣款信息。&lt;br /&gt;
       这一天晚上，我自作聪明地想——最近英国脱欧，欧洲与英国的经济都是持续低迷，能不能借着汇率省下一笔呢？我浏览了德国亚马逊的同款产品，的确便宜，只要170RMB左右。于是我偷着乐地取消了Preparing for package的订单。但是很快，我就发现，德国亚马逊并不支持International Shipment(国际直邮)，也就意味着需要转运公司。但是转运一来速度慢，不稳定，而来按重量计价，贵。真是沮丧，所以，我还是选择买个安心，又重新提交了订单。正是这一错误的抉择让我多等了好几天。&lt;br /&gt;
       第二次的订单提交后，我又在交易记录上发现了问题——多扣了一美元？这是为什么？为什么我要凭白无故地多支付一美元？第二天，我对亚马逊的客服发了一封邮件，详细询问了情况。原来，这一美元是用来检测银行卡是否丢失以及卡内的余额，很快就会退还。&lt;br /&gt;
       接下来就是漫长的等待。这次的国际直邮耗费了将近1个月的时间。我从开始每天焦急地查看到后来渐渐淡忘了这件事。突然有一天，通关网发来了一条信息，要求我进行报关信息地填写，我实在按捺不住自己的兴奋，在核对订单进行了填写。又过了许久，包裹终于到达中国了！最后的几天USPS很快就派送到了。&lt;br /&gt;
       由于过了好些日子，收到包裹时没有那么兴奋了。但是真正看到笔时还是真心喜欢。说明，这次的选择是正确的。
&lt;br /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-2.JPG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-1.JPG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-4.JPG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-3.JPG&quot; alt=&quot;&quot; /&gt;
       每每想到这是大洋彼岸的快递，我总会感叹互联网的神奇，至今，我还是有点不可思议。但是亚马逊真的做到了，除了中国市场才进入1～2年，亚马逊在其他国家已经经营了15～20年之久了。而23年前，亚马逊诞生之时，阿里巴巴和京东根本就不存在。而亚马逊也以服务质量著称，客服有着十足的权力，而售后服务却是中国电商一直很头痛的问题，也是用户的痛点。只要亚马逊在中国能继续保持质优价低服务好的特点，再配备中国发达的快递业务，基本可以碾压淘宝和京东。&lt;br /&gt;
       我一直认为只有国外好的产品不断给国内产业加压，才能刺激中国公司的不断成长。举一个反面例子：百度。自从2010年Google离开中国之后，近年来不知道横向发展成什么样子。一家没有样子的科技公司，竞价排名浪费我们时间也就算了，还闹出人民，除了整合本地化外也就真的没有优点了。再比如，腾讯。自己的QQ没有聊天软件的样子，除了用户基数，哪一个能有Messager或Telegram做得好？也是时候引进一下外资企业，让用户得到更优质的服务，让企业好好纵向发展一下了！&lt;/p&gt;</content><author><name></name></author><summary type="html">海淘初体验 这是我第一次在美国亚马逊购物，这是我第一次海淘和收到外国包裹的经历。谨以此篇记录。</summary></entry><entry><title type="html">DHT网络详解与DHT爬虫编写指南</title><link href="/jekyll/update/2017/07/22/DHT%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3%E4%B8%8EDHT%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97.html" rel="alternate" type="text/html" title="DHT网络详解与DHT爬虫编写指南" /><published>2017-07-22T14:52:00+08:00</published><updated>2017-07-22T14:52:00+08:00</updated><id>/jekyll/update/2017/07/22/DHT%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3%E4%B8%8EDHT%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97</id><content type="html" xml:base="/jekyll/update/2017/07/22/DHT%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3%E4%B8%8EDHT%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97.html">&lt;h1 id=&quot;dht网络详解与dht爬虫编写指南&quot;&gt;DHT网络详解与DHT爬虫编写指南&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/DHT-Spider.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/LEXUGE/DHT-Spider&quot;&gt;DHT-Spider项目主页&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;前言与背景：&lt;br /&gt;
随着网络的不断发展，我们中的大多数应该都下载过东西。如果你是一位电影爱好者或开源软件爱好者。那你一定使用过P2P下载。其中，主流的就是BT下载。&lt;br /&gt;
虽然，BT是P2P下载，但实际上，他并不是完全P2P的。它需要Tracker来通告节点，进行信息交换。所以，近年来的版权保护者与政府部门一直在封禁和打击Tracker。比较近的例子就是BT Sync的Tracker被封禁，导致0节点的惨剧。&lt;br /&gt;
那能否做到真正的P2P呢？当然可以，这需要的是DHT(Distributed Hash Table 分布式哈系表)来进行传输，这就是一种去中心化网络。每个加入这个网络的节点都要负责维护一张表格用来存储网络中其他人和资源的信息。任何一个节点的损坏都不足以对整个网络造成致命影响。&lt;br /&gt;
但是就是因为这种隐秘性的特点，资源也是不为人知。尽管目前有许多的BT分享网站(比如：海盗湾),但是他们的中心化意味着他们有随时被关停的可能。所以，拥有一个自己的DHT爬虫来进行资源嗅探是很重要的。
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Kademlia网络：
    &lt;ul&gt;
      &lt;li&gt;Kademlia一个分散式杂凑表实现的协议，专门为P2P计算机网络设计。&lt;br /&gt;
该网络规定了网络的结构与节点信息查询方式，节点与结点之间使用UDP进行通讯。每个结点都有一个唯一的身份标识(节点ID)，所有的节点都维护着一张覆盖网。网络上的文件散列与节点ID直接对应，表示着哪个节点存储着的文件和相关信息。&lt;/li&gt;
      &lt;li&gt;Kademlia是用XOR进行节点距离的计算的。这样可以快速得到与目标节点(target)最近的节点(也有可能就是target),XOR的算法是bit位如果相等就记作0，否则为1，这意味着:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.当两个节点高位数值越为相同，XOR的结果也就越小，距离也就越小(这点上，无论是数学还是实际都是如此)。  
2.具有反向对称性(A XOR B与B XOR A是相等的)
3.XOR符合三角形的性质(即：a+b&amp;gt;c),这点对于路由表的寻路起着巨大作用
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;所以，XOR是作为距离计算的最佳算法。此外，XOR还能大幅增加寻路速度：可以保证每次与目标节点(target)靠近1 bit，这意味着：对于一个n位的节点ID，我们只需要至多log2(N)就可以找到目标节点。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Kademlia的路由表采用的是列表-条目的方式。每个条目由节点ID对应其的IP:port或资源等。对于一个N位的节点ID，它会拥有N个K桶(也就是说每个桶只能有K个节点)。其中，第1个桶距离节点最远(也就是最高位与节点ID的最高位取反)，第二个就是第二位，以此类推。注意，这里的K不一定能存储下所有的节点(也就是说不是完全的)。这样的存储方式有别于二叉树，进行了很好的分类，这可以让FIND_NODE操作返回更为精确和快速：当无法找到一模一样节点ID时，直接返回可能节点(表中与目标ID最近的节点)所在K桶中的K个元素即可(因为K桶内的元素与可能节点最近，最有可能和可能节点一起存储有目标ID)。&lt;/li&gt;
      &lt;li&gt;Kademlia的节点查询(FIND_NODE)：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.发起者在自己路由表中寻找与目标ID最近的K个节点发起FIND_NODE请求。
2.接受者在接到以后，如果在自己的路由表中找到了目标节点，则返回该条目，否则返回可能节点所在K桶的K个节点条目
3.发起者在自己发起请求的目标所在的K桶中更新返回结果，使K桶始终保持最优状态。
4.发起者递归发起，直到找到目标节点。(如果没有发现节点更为接近的情况，那么就终止查询)  
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Kademlia加入网络：&lt;br /&gt;
Kademlia网络中的新节点加入需要一个引导节点作为介绍人。也就是说你必须先知道引导节点的IP:port。当你连接上引导节点时，新节点会用FIND_NODE自己的方式来使引导节点去询问自己的邻居节点。之后，邻居节点继续询问邻居节点，直到引导节点找到新节点。这一操作会一路对邻居的K桶进行刷新。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;KPPC协议：&lt;br /&gt;
这是一种基于Kademlia的改进协议，支持四种消息格式：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.ping 检测节点是否可连接
2.find_node 得到给定节点ID的对应信息(IP:port)
3.get_peers 根据infohash提供对应信息(IP:port)
4.announce_peer 宣布自己正在下载torrent文件
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;还需要注意，这里的消息包传送用的是bencode加密后的结果，关于bencode的加密方式：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.string: 字符是以这种方式编码的: &amp;lt;字符串长度&amp;gt;:&amp;lt;字符串&amp;gt;
如 hell: 4:hell
2.integer: 整数是一这种方式编码的: i&amp;lt;整数&amp;gt;e
如 1999: i1999e
3.list: 列表是一这种方式编码的: l[数据1][数据2][数据3][…]e
如列表 [hello, world, 101]：l5:hello5:worldi101ee
4.dictionary: 字典是一这种方式编码的: d[key1][value1][key2][value2][…]e，其中 key 必须是 string 而且按照字母顺序排序
如字典 {aa:100, bb:bb, cc:200}： d2:aai100e2:bb2:bb2:cci200ee
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;KPPC消息包的基本元素：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.t关键字: 每条消息都包含 t 关键字，它是一个代表了 transaction ID 的字符串。transaction ID 由请求节点产生，并且回复中要包含回显该字段(挑战-响应模型)，所以回复可能对应一个节点的多个请求。transaction ID 应当被编码为一个短的二进制字符串，比如 2 个字节，这样就可以对应 2^16 个请求
2.y关键字: 它由一个字节组成，表明这个消息的类型。y 对应的值有三种情况
 1) q 表示请求(请求Queries): q类型的消息它包含 2 个附加的关键字 q 和 a
   1.1) 关键字 q: 是字符串类型，包含了请求的方法名字(get_peers/announce_peer/ping/find_node)
   1.2) 关键字 a: 一个字典类型包含了请求所附加的参数(info_hash/id..)
 2) r 表示回复(回复 Responses): 包含了返回的值。发送回复消息是在正确解析了请求消息的基础上完成的，包含了一个附加的关键字 r。关键字 r 是字典类型
   2.1) id: peer节点id号或者下一跳DHT节点
           2.2) nodes&quot;: &quot;&quot;
           2.3) token: token
 3) e 表示错误(错误 Errors): 包含一个附加的关键字 e，关键字 e 是列表类型
   3.1) 第一个元素是数字类型，表明了错误码，当一个请求不能解析或出错时，错误包将被发送。下表描述了可能出现的错误码
   201: 一般错误
   202: 服务错误
   203: 协议错误，比如不规范的包，无效的参数，或者错误的 toke
   204: 未知方法
   3.2) 第二个元素是字符串类型，表明了错误信息
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;ping请求：&lt;br /&gt;
ping用于检测节点是否可连接，包含一个节点ID，回复也包含回复者的节点ID。&lt;/li&gt;
      &lt;li&gt;find_node请求：&lt;br /&gt;
给定请求节点(被find_node的节点)的ID和目标ID,回复目标ID的info或者是可能节0点所在K桶的K个节点。&lt;/li&gt;
      &lt;li&gt;get_peers请求：
包含请求节点的ID和infohash,给出目标ID的info&lt;/li&gt;
      &lt;li&gt;announce_peer请求：
包含4个参数：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.id:包含请求节点的ID
2.info_hash:包含torrent文件的info_hash
3.port:表示peer正在下载的端口
4.token:这里的token要与get_peers中得到的token相同才可以证明该announce_peer不是伪造的
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;相关链接:&lt;br /&gt;
&lt;a href=&quot;http://www.bittorrent.org/beps/bep_0005.html&quot;&gt;BEP_0005&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DHT-Spider实现：&lt;br /&gt;
DHT这种P2P网络在对抗攻击与封锁的同时也有如下的缺点：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.伪造攻击: 有些不听话的用户可能会在DHT网络里捣乱，譬如说撒谎，明明自己不是奥巴马，却偏说自己是奥巴马，这样会误导其他人无法正常获取想要的资源
2.嗅探攻击: 另外，用户在DHT网络里的隐私可能会被窃听，因为在DHT网络里跟其他用户交换资源的时候，难免会暴露自己的IP地址，所以别人就会知道你有什么资源，你在请求什么资源了。这也是目前DHT网络里一直存在的一个弱点
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;我编写的&lt;a href=&quot;https://github.com/LEXUGE/DHT-Spider&quot;&gt;DHT-Spider&lt;/a&gt;能够通过token和infohash的双重检查来解决第一种缺点。但目前无法解决第二种。&lt;br /&gt;
实际上，爬虫的主要思路是不断地主动find_node来扩充自己的路由表，然后积极回应get_peers和announce_peer,infohash的主要来源也是这两种请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BitTorrent文件编码与格式：&lt;br /&gt;
整个&lt;code class=&quot;highlighter-rouge&quot;&gt;.torrent&lt;/code&gt;文件采用的是bencode加密，最主要的部分是info字段，是一个字典，包含了文件名，文件大小，infohash，以及sha1散列簇。torrent文件的核心也在此。&lt;br /&gt;
作为一个trackless的脚本，我们不需要添加其他的东西(announce等)，这样可以保证DHT的稳定性和隐蔽性。&lt;br /&gt;
值得注意的是：在编辑torrent文件时，请使用16进制编辑器(比如ghex)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Peer Wire协议：&lt;br /&gt;
在BitTorrent中，节点的寻址通过DHT实现，但是，获取了IP:port之后，实际的数据交换需要Peer Wire协议。
    &lt;ul&gt;
      &lt;li&gt;握手：&lt;br /&gt;
Peer Wire协议是Peer之间的通信协议，通常由一个握手消息开始。
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pstrlen&amp;gt;&amp;lt;pstr&amp;gt;&amp;lt;reserved&amp;gt;&amp;lt;info_hash&amp;gt;&amp;lt;peer_id&amp;gt;&lt;/code&gt;&lt;br /&gt;
在BitTorrent协议的v1.0版本, pstrlen = 19, pstr = “BitTorrent protocol”，info_hash是上文中提到的磁力链接中的btih&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BitTorrent协议扩展与ut_metadata：&lt;br /&gt;
借助DHT的寻址以及Peer Wire的握手，接下来就可以获取metadata了(包含info字段)。&lt;br /&gt;
Metadata被分块，每个块有16KB(16384字节)，Metadata块从0开始索引，所有块的大小都是16KB，除了最后一个块可能比16KB小。
    &lt;ul&gt;
      &lt;li&gt;Extension头部：
Metadata的扩展使用BEP_0010进行声明，在头部的m字典加入ut_metadata选项并制定metadata的字节数。&lt;/li&gt;
      &lt;li&gt;Extension消息：
这里的消息采用bencode编码，有三种:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.request(请求):
请求消息并不在字典中附加任何关键字，这个消息的回复应当来自支持这个扩展的peer，是一个reject或者data消息，回复必须和请求所指出的片相同
Peer必须保证它所发送的每个片都通过了infohash的检测。即直到peer获得了整个metadata并通过了infohash的验证，才能够发送片(即一个peer应该保证自己已经完整从其他peer中拷贝了一份相同的资源文件后，才能继续响应其他节点的拷贝请求)。Peers没有获得整个metadata时，对收到的所有metadata请求都必须直接回复reject消息
{'msg_type': 0, 'piece': 0}
d8:msg_typei0e5:piecei0ee
这代表请求消息在请求metadata的第一片
1.data
这个data消息需要在字典中添加一个新的字段，&quot;total_size&quot;.这个关键字段和extension头的&quot;metadata_size&quot;有相同的含义，这是一个整型
Metadata片被添加到bencode字典后面，他不是字典的一部分，但是是消息的一部分(必须包括长度前缀)。
如果这个片是metadata的最后一个片，他可能小于16KB。如果它不是metadata的最后一片，那大小必须是16KB
{'msg_type': 1, 'piece': 0, 'total_size': 3425}
d8:msg_typei1e5:piecei0e10:total_sizei34256eexxxxxxxx...
x表示二进制数据(metadata)
2.reject
Reject消息没有附件的关键字。它的意思是peer没有请求的这个metadata片信息
在客户端收到收到一定数目的消息后，可以通过拒绝请求消息来进行洪泛攻击保护。尤其在metadata的数目乘上一个因子时
{'msg_type': 2, 'piece': 0}
d8:msg_typei1e5:piecei0ee
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Extension支持交互：&lt;br /&gt;
根据BEP_0010的规定，扩展消息在Peer Wire之后发出，为一个bencode编码的字典：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e:0,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ipv4:xxx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ipv6:xxx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;complete_ago:1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;m:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;upload_only:3,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;lt_donthave:7,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_holepunch:4,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_metadata:2,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_pex:1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_comment:6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;matadata_size:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45377&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;p:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33733&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;reqq:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;v:BitTorrent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yp:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19616&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yourip:xxx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.m:是一个字典，表示客户端支持的所有扩展以及每个扩展的编号&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_pex:表示该客户端支持PEX(Peer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Exchange)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_metadata表示支持BEP&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-0009&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(也就是交换种子文件的metadata)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;通知交互完成之后，按[“msg_type”: 0, “piece”: piece]的格式逐块向对方请求metadata,最后进行拼接形成info字段。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;校验infohash&amp;amp;收尾：&lt;br /&gt;
这一步比较简单，直接对获得的metadata进行转字符串再进行sha1处理即可。&lt;br /&gt;
之后再与已有infohash进行比对。&lt;br /&gt;
最后对信息进行输出和存储。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，就完成了！&lt;br /&gt;
具体脚本使用指南参考我的项目，在此不再详述。&lt;/p&gt;</content><author><name></name></author><summary type="html">DHT网络详解与DHT爬虫编写指南 DHT-Spider项目主页 前言与背景： 随着网络的不断发展，我们中的大多数应该都下载过东西。如果你是一位电影爱好者或开源软件爱好者。那你一定使用过P2P下载。其中，主流的就是BT下载。 虽然，BT是P2P下载，但实际上，他并不是完全P2P的。它需要Tracker来通告节点，进行信息交换。所以，近年来的版权保护者与政府部门一直在封禁和打击Tracker。比较近的例子就是BT Sync的Tracker被封禁，导致0节点的惨剧。 那能否做到真正的P2P呢？当然可以，这需要的是DHT(Distributed Hash Table 分布式哈系表)来进行传输，这就是一种去中心化网络。每个加入这个网络的节点都要负责维护一张表格用来存储网络中其他人和资源的信息。任何一个节点的损坏都不足以对整个网络造成致命影响。 但是就是因为这种隐秘性的特点，资源也是不为人知。尽管目前有许多的BT分享网站(比如：海盗湾),但是他们的中心化意味着他们有随时被关停的可能。所以，拥有一个自己的DHT爬虫来进行资源嗅探是很重要的。 Kademlia网络： Kademlia一个分散式杂凑表实现的协议，专门为P2P计算机网络设计。 该网络规定了网络的结构与节点信息查询方式，节点与结点之间使用UDP进行通讯。每个结点都有一个唯一的身份标识(节点ID)，所有的节点都维护着一张覆盖网。网络上的文件散列与节点ID直接对应，表示着哪个节点存储着的文件和相关信息。 Kademlia是用XOR进行节点距离的计算的。这样可以快速得到与目标节点(target)最近的节点(也有可能就是target),XOR的算法是bit位如果相等就记作0，否则为1，这意味着: 1.当两个节点高位数值越为相同，XOR的结果也就越小，距离也就越小(这点上，无论是数学还是实际都是如此)。 2.具有反向对称性(A XOR B与B XOR A是相等的) 3.XOR符合三角形的性质(即：a+b&amp;gt;c),这点对于路由表的寻路起着巨大作用 所以，XOR是作为距离计算的最佳算法。此外，XOR还能大幅增加寻路速度：可以保证每次与目标节点(target)靠近1 bit，这意味着：对于一个n位的节点ID，我们只需要至多log2(N)就可以找到目标节点。 Kademlia的路由表采用的是列表-条目的方式。每个条目由节点ID对应其的IP:port或资源等。对于一个N位的节点ID，它会拥有N个K桶(也就是说每个桶只能有K个节点)。其中，第1个桶距离节点最远(也就是最高位与节点ID的最高位取反)，第二个就是第二位，以此类推。注意，这里的K不一定能存储下所有的节点(也就是说不是完全的)。这样的存储方式有别于二叉树，进行了很好的分类，这可以让FIND_NODE操作返回更为精确和快速：当无法找到一模一样节点ID时，直接返回可能节点(表中与目标ID最近的节点)所在K桶中的K个元素即可(因为K桶内的元素与可能节点最近，最有可能和可能节点一起存储有目标ID)。 Kademlia的节点查询(FIND_NODE)： 1.发起者在自己路由表中寻找与目标ID最近的K个节点发起FIND_NODE请求。 2.接受者在接到以后，如果在自己的路由表中找到了目标节点，则返回该条目，否则返回可能节点所在K桶的K个节点条目 3.发起者在自己发起请求的目标所在的K桶中更新返回结果，使K桶始终保持最优状态。 4.发起者递归发起，直到找到目标节点。(如果没有发现节点更为接近的情况，那么就终止查询) Kademlia加入网络： Kademlia网络中的新节点加入需要一个引导节点作为介绍人。也就是说你必须先知道引导节点的IP:port。当你连接上引导节点时，新节点会用FIND_NODE自己的方式来使引导节点去询问自己的邻居节点。之后，邻居节点继续询问邻居节点，直到引导节点找到新节点。这一操作会一路对邻居的K桶进行刷新。</summary></entry><entry><title type="html">Jekyll配置指北</title><link href="/jekyll/update/2017/07/21/Jekyll%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97.html" rel="alternate" type="text/html" title="Jekyll配置指北" /><published>2017-07-21T11:54:00+08:00</published><updated>2017-07-21T11:54:00+08:00</updated><id>/jekyll/update/2017/07/21/Jekyll%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97</id><content type="html" xml:base="/jekyll/update/2017/07/21/Jekyll%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97.html">&lt;h1&gt;Jekyll配置指北&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
本站的每一处都可以见到原子效果动态背景，科技感十足。实际上，这是一个JS脚本。&lt;br /&gt;
以Jekyll的原生主题minima为例，我们进行配置。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;获取minima主题的绝对路径：&lt;br /&gt;
在高版本的Jekyll中，minima是隐藏的。所以我们需要获取绝对路径。&lt;br /&gt;
在你的BLOG的根目录下：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle show minima
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;这会输出minima的绝对路径。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;获取配置好的主题：&lt;br /&gt;
&lt;a href=&quot;/download/minima-2.1.zip&quot;&gt;Jekyll-minima-科技感配置&lt;/a&gt;&lt;br /&gt;
下载好后，解压，将particles.js剪切到BLOG的根目录，并将剩下的整个配置文件夹替换原来的minima。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm -rf [minima的绝对路径]
sudo cp -r minima-2.1.0 [minima的绝对路径减少一级]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;完成!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Jekyll配置指北 本站的每一处都可以见到原子效果动态背景，科技感十足。实际上，这是一个JS脚本。 以Jekyll的原生主题minima为例，我们进行配置。 获取minima主题的绝对路径： 在高版本的Jekyll中，minima是隐藏的。所以我们需要获取绝对路径。 在你的BLOG的根目录下： bundle show minima 这会输出minima的绝对路径。 获取配置好的主题： Jekyll-minima-科技感配置 下载好后，解压，将particles.js剪切到BLOG的根目录，并将剩下的整个配置文件夹替换原来的minima。 sudo rm -rf [minima的绝对路径] sudo cp -r minima-2.1.0 [minima的绝对路径减少一级] 完成!</summary></entry><entry><title type="html">漫话“共享”</title><link href="/jekyll/update/2017/07/16/%E6%BC%AB%E8%AF%9D-%E5%85%B1%E4%BA%AB.html" rel="alternate" type="text/html" title="漫话“共享”" /><published>2017-07-16T21:01:00+08:00</published><updated>2017-07-16T21:01:00+08:00</updated><id>/jekyll/update/2017/07/16/%E6%BC%AB%E8%AF%9D%E2%80%9C%E5%85%B1%E4%BA%AB%E2%80%9D</id><content type="html" xml:base="/jekyll/update/2017/07/16/%E6%BC%AB%E8%AF%9D-%E5%85%B1%E4%BA%AB.html">&lt;h1&gt;漫话“共享”&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/共享单车.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;共享经济为人们带来许多生活上的方便，我们可以随时享受出行的便利，直接扫玛骑上共享单车。更早的，2016年时的“互联网出租车”、“专车”等服务也是共享经济的体现。好处不必多说，实实在在的作用也在生活中有所体现。但是，“共享”真的能“经济化”吗？这篇文章将不会谈论表象上的问题，诸如单车乱丢等，而是会窥探共享经济的本质，共享经济究竟是不是披着羊皮的狼？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先，我们需要知道共享经济是什么。共享经济是指拥有闲置资源的机构或个人有偿让渡资源使用权给他人，让渡者获取回报，分享者利用分享自己的闲置资源创造价值。实际上，作为这种人与人真诚交换的，共产主义的“各尽所能，按需分配”很早就已经提出了。共享经济只是搭着共产主义的顺风车而以。&lt;br /&gt;
&lt;br /&gt;
甚至，共享经济还时曲解共产主义的。共产主义的“物质生产极大丰富，各尽所能，按需分配”实际上的含义是：随着我们生产力的提高，每个人将自己的一部分劳动力贡献给社会，社会集合起来后，我们再向社会索取我们需要的一部分。再这当中，强调的是贡献和索取的平衡，其中的“社会”的存在只是中转站而以，并不索取什么。但是现在，共享经济做的又是什么呢？以专车为例，网约车平台既不提供车辆，又不为司机提供安全保障，同时，这也是对消费者安全的不负责。实际上，这是阉割了的共产主义，把共产主义作为一种交易的方式存在，本身不符合共产主义的意义，但在资本主义当道的世界中也无可厚非。但其次，最让人痛恨的是，网约车平台乘机成为了“社会”的角色，本身并不对双方负责还要抽取利润，简直就是新时代的地主，甚至比地主还不如。因为他们的“地”也不是自己的。这样一种平台的出现，除了内心中还也还不清的道德罪，还有什么需要承担的呢？&lt;br /&gt;
&lt;br /&gt;
不光是自己淌着灰色地带，共享经济还带来许多浅层的社会问题。共享经济公司宣称是让社会变得更美好。但是，双方都是普通人的情况下，他们的服务质量可靠吗？我们实际上在选择共享经济的同时放弃了法律的保护。作为一个处于灰色地带的行业，双方都不需要严格履行职责，我们在获取便利的同时其实放下了法律武器。你试想过吗：你乘坐的专车司机不认路，你乘坐的共享单车被人吐过唾沫。我们又找谁去说法？我们既是使用者又是劳动者，公司完全可以试图把义务撇得一干二净。到头来还是我们吃亏。&lt;br /&gt;
&lt;br /&gt;
既是上面的问题被解决，共享主义这个“资本主义”和“共产主义”的混合产物照样还是面临着巨大的问题：资源分配。共享经济的原意是希望资源平等分配，甚至一度被认为是劫富济贫的罗宾汉一般的存在。但是，以一个很简单的例子说明：现在，在一二线城市，我们想要一辆普通的出租车是不是更难更贵了？老年人呢？没有手机的人呢？他们还能打到车吗？很显然这一切都变得困难起来，但是实际上，出租车的数量并没有变化，但是越来越低的门槛和低价低质的服务不得不让传统出租车行业为服务涨价。老年人，原本就并不怎能打到车的群体，现在更是丧失了打车的权力。这一切都是共享经济造成的，原本是为了平分资源，现在还是落到了资源集中的地步。原本为了降低门槛现在反而提高了弱势群体的门槛。&lt;br /&gt;
&lt;br /&gt;
试想一下，共享单车的总使用人数总是要比投放数量多的，这意味着公司可以有一大笔并不受到风险的资金可以去做别的事，一目前的用户基数来看，这不会是一笔小数目，这笔钱他们在干什么，怎么干，我们清楚吗，我们能监管吗？我们甚至在放弃自己的监管权力。共享经济背后的公司们以非共享公开的理念做事，打着共享的幌子，进行融资回扣。这样的公司本身就是背道而驰的。&lt;br /&gt;
&lt;br /&gt;
如同同时期许多的互联网泡沫一样，我们人类社会的发展还没能发展到如此乌邦托的地步，我们的自身水平还为如此发达。我们最终还是需要法律来规范共享经济的行为，让一切又归可循。共享经济并不一定是错的，真正的成功是在未来的某一刻。&lt;/p&gt;</content><author><name></name></author><summary type="html">漫话“共享” 共享经济为人们带来许多生活上的方便，我们可以随时享受出行的便利，直接扫玛骑上共享单车。更早的，2016年时的“互联网出租车”、“专车”等服务也是共享经济的体现。好处不必多说，实实在在的作用也在生活中有所体现。但是，“共享”真的能“经济化”吗？这篇文章将不会谈论表象上的问题，诸如单车乱丢等，而是会窥探共享经济的本质，共享经济究竟是不是披着羊皮的狼？</summary></entry><entry><title type="html">为梦仰望</title><link href="/jekyll/update/2017/07/10/%E4%B8%BA%E6%A2%A6%E4%BB%B0%E6%9C%9B.html" rel="alternate" type="text/html" title="为梦仰望" /><published>2017-07-10T20:18:00+08:00</published><updated>2017-07-10T20:18:00+08:00</updated><id>/jekyll/update/2017/07/10/%E4%B8%BA%E6%A2%A6%E4%BB%B0%E6%9C%9B</id><content type="html" xml:base="/jekyll/update/2017/07/10/%E4%B8%BA%E6%A2%A6%E4%BB%B0%E6%9C%9B.html">&lt;h1&gt;为梦仰望  ——电影《冈仁波齐》观后感&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;No Fear In My Heart: &lt;audio src=&quot;/music/No Fear In My Heart.mp3&quot; controls=&quot;controls&quot; loop=&quot;loop&quot;&gt;&lt;/audio&gt;&lt;br /&gt;
&lt;br /&gt;
这是一个关于信仰的故事，这是一个关于每个生命内心的呐喊，这是一段对追随信仰的记录。&lt;br /&gt;
电影讲述了一支真实的朝圣队伍，在藏历新年从芒康朝拜去拉萨，尔后又去往神山冈仁波齐朝圣的故事。这一年正是神山冈仁波齐的本命年。每一个人都怀揣着自己的梦想、希望与抱负，但却走在了一起，11人踏上了历时一年，长达2000公里的朝圣之路。&lt;br /&gt;
他们的每个人都有自己的生活追求与梦想，但却又是什么使他们团结得走到一起？是信仰？是，然而又不全是。他们都信仰着藏传佛教，信仰着冈仁波齐，但是因为梦想不同，他们的信念不同，对信仰的看法也不同。&lt;br /&gt;
影片中，各个角色都曾发表过自己对上天的看法。有人曾经说过：“自己并没有做过什么对不起人的事情，但是为何自己家盖房子就会死二伤二呢？”这事实上比任何地方的朝圣者都要来的真实，他们反映出信仰者们对信仰的怀疑。之后，又有人说：“磕头磕出血，只能说是你磕得用心，磕得虔诚，是对信仰也是对自己的虔诚。”着表现出来了人们对于信仰怀疑之后的包容。&lt;br /&gt;
人，总需要仰望点什么。为梦仰望，为在自己的梦想选择自己的信仰。信仰和梦想，如同诗和远方，诗和信仰，不切实际但给你执着的内心，而梦想和远方，是对未来的渴望与眺望。执着得久，走得越久，望得越远，走得越远。虽然，我们不一定走到了梦想的位置，但他们带动着我们向远方前进。你得远方可以不切实际，可以天马行空，只要你对他有足够虔诚的信仰，并且不忘初心。那么你一定可以到达你意想不到的地方，得到充满惊喜的未来。&lt;br /&gt;
在拉萨的拍摄现场，片中朝圣者因为配合拍摄，被其他朝圣者吐口水，一度放弃拍摄。直到一位喇嘛开导：“如果你们觉得做的事是正确的，那又何必害怕别人朝你吐口水呢。”诚然如此，只要你觉得正确，又何必害怕？这个世界上没有什么生活方式是完全正确的，远方不是终点，达不到也不必遗憾，但是我们必须接受平凡的自我，去大胆地想象，去大胆地做，又何必在意或害怕别人的看法呢？著名法国哲学家萨特说过：“他人即地狱”。我们不要因为成为“对象我”而失去对初心的追求。&lt;br /&gt;
信仰，可以是任何东西，可以是一个项目，一门技术，一个伟人等等。但它必须超脱功利价值的存在，这样，信仰才会“有趣”。为梦想二存在的信仰才是有价值的。&lt;br /&gt;
如同影片中屠夫的赎罪，他要为自己的灵魂的赎罪，这就是对自己价值的提升，所以，他信仰了。&lt;br /&gt;
若干年后，我们可能会嘲笑自己幼稚，但是无论如何，为梦仰望，接受平凡而又不甘平凡，努力活出最好的我，不为未来留下遗憾。&lt;/p&gt;</content><author><name></name></author><summary type="html">为梦仰望 ——电影《冈仁波齐》观后感 No Fear In My Heart: 这是一个关于信仰的故事，这是一个关于每个生命内心的呐喊，这是一段对追随信仰的记录。 电影讲述了一支真实的朝圣队伍，在藏历新年从芒康朝拜去拉萨，尔后又去往神山冈仁波齐朝圣的故事。这一年正是神山冈仁波齐的本命年。每一个人都怀揣着自己的梦想、希望与抱负，但却走在了一起，11人踏上了历时一年，长达2000公里的朝圣之路。 他们的每个人都有自己的生活追求与梦想，但却又是什么使他们团结得走到一起？是信仰？是，然而又不全是。他们都信仰着藏传佛教，信仰着冈仁波齐，但是因为梦想不同，他们的信念不同，对信仰的看法也不同。 影片中，各个角色都曾发表过自己对上天的看法。有人曾经说过：“自己并没有做过什么对不起人的事情，但是为何自己家盖房子就会死二伤二呢？”这事实上比任何地方的朝圣者都要来的真实，他们反映出信仰者们对信仰的怀疑。之后，又有人说：“磕头磕出血，只能说是你磕得用心，磕得虔诚，是对信仰也是对自己的虔诚。”着表现出来了人们对于信仰怀疑之后的包容。 人，总需要仰望点什么。为梦仰望，为在自己的梦想选择自己的信仰。信仰和梦想，如同诗和远方，诗和信仰，不切实际但给你执着的内心，而梦想和远方，是对未来的渴望与眺望。执着得久，走得越久，望得越远，走得越远。虽然，我们不一定走到了梦想的位置，但他们带动着我们向远方前进。你得远方可以不切实际，可以天马行空，只要你对他有足够虔诚的信仰，并且不忘初心。那么你一定可以到达你意想不到的地方，得到充满惊喜的未来。 在拉萨的拍摄现场，片中朝圣者因为配合拍摄，被其他朝圣者吐口水，一度放弃拍摄。直到一位喇嘛开导：“如果你们觉得做的事是正确的，那又何必害怕别人朝你吐口水呢。”诚然如此，只要你觉得正确，又何必害怕？这个世界上没有什么生活方式是完全正确的，远方不是终点，达不到也不必遗憾，但是我们必须接受平凡的自我，去大胆地想象，去大胆地做，又何必在意或害怕别人的看法呢？著名法国哲学家萨特说过：“他人即地狱”。我们不要因为成为“对象我”而失去对初心的追求。 信仰，可以是任何东西，可以是一个项目，一门技术，一个伟人等等。但它必须超脱功利价值的存在，这样，信仰才会“有趣”。为梦想二存在的信仰才是有价值的。 如同影片中屠夫的赎罪，他要为自己的灵魂的赎罪，这就是对自己价值的提升，所以，他信仰了。 若干年后，我们可能会嘲笑自己幼稚，但是无论如何，为梦仰望，接受平凡而又不甘平凡，努力活出最好的我，不为未来留下遗憾。</summary></entry></feed>