<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-08-05T22:52:50+08:00</updated><id>/</id><title type="html">BLOG|LEXUGE</title><subtitle>即使被全世界孤立，也要一个人笑得精彩！</subtitle><entry><title type="html">象印杭州</title><link href="/jekyll/update/2017/08/05/%E8%B1%A1%E5%8D%B0%E6%9D%AD%E5%B7%9E.html" rel="alternate" type="text/html" title="象印杭州" /><published>2017-08-05T14:03:00+08:00</published><updated>2017-08-05T14:03:00+08:00</updated><id>/jekyll/update/2017/08/05/%E8%B1%A1%E5%8D%B0%E6%9D%AD%E5%B7%9E</id><content type="html" xml:base="/jekyll/update/2017/08/05/%E8%B1%A1%E5%8D%B0%E6%9D%AD%E5%B7%9E.html">&lt;h1&gt;象印杭州&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/杭州-鸟.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;杭州，一个静与动的完美结合；一段现代与古代的姻缘；一处自然与发展融洽相处的圣地。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;（一）浙江省博物馆&lt;/center&gt;
&lt;p&gt;浙江省博物馆与杭州其他许多的博物馆坐落在一个广场。我十分赞赏这种设计。博物馆，作为历史的诉说者，也作为城市的名片。从人类的出现到近代历史，浙江省博物馆很好地讲述着这一切，并且保有着十大镇馆之宝。用藏品和文字一步步揭开千年来的历史面纱，其中包括玉琮在内的珍品，都标志着人类文明的一次又一次的进步。从浙江作为全国文化的中心到浙江的衰落，再到兴起，无不向人类诉说着杭州的历史变迁、人文情怀。&lt;/p&gt;
&lt;center&gt;（二）灵隐古刹&lt;/center&gt;
&lt;p&gt;清泉潺潺，古树斜倚，一旁“飞来山上千寻塔”，一旁千年古刹禅意深。灵隐寺坐落在西湖的西北面，靠山面山，是江南禅宗“五山”之一。由西印度僧人慧理修建。曾经与灵隐寺一同诞生的有五座古刹，但是都不同程度的被破坏和捣毁。现如今只剩下灵隐寺这唯一的一座了。清乾隆帝曾亲笔赐名“云林禅寺”。现如今的灵隐寺有着络绎不绝的香客、游客，欣然接受着天底下善男信女的虔诚。灵隐寺这一座千年古刹经历了一代又一代的兴衰，曾经面临过寺毁僧散的厄运，也曾兴盛至极，成为乾隆下江南的必经之所。我学着当年乾隆在山顶古泉用泉水洗手，品龙井，再到灵隐寺静心参禅。品位茶与佛与禅三者和一的境界。&lt;/p&gt;
&lt;center&gt;(三)浙江大学&lt;/center&gt;
&lt;p&gt;浙大，是杭州也是浙江省内最好的大学之一。这次我造访的是浙江大学数个校区中历史最悠久的玉泉校区。玉泉校区很有百年老校的风貌。此时的浙大，正好处于120周年校庆之际。校区内的建筑都是红砖瓦修葺而成。采用三角形的尖顶。很有民国建筑风格。青色的爬山虎爬遍了整堵墙。满地长着绿色植物，高及脚踝。校园的路边都种着大树，似乎是白杨或是垂柳，遮着半边天。从校门口望去就可以看到毛泽东挥手的铜像。我来时，正好天空有几番下雨的意思。阴云密布，铜像在此之中，恰似一番拨云见日的意象，别有一番趣味与威严。&lt;br /&gt;
校区似乎修在斜坡之上。在学校中骑着自行车，可以看到许多名人募捐修建的建筑，如：邵逸夫体育馆。作为一座百年名校，浙大可能是我到过的最有学术气氛的大学。加之杭州深厚的文化底蕴，更是一所独一无二的大学。&lt;/p&gt;
&lt;center&gt;（四）西湖印象 &lt;/center&gt;
&lt;p&gt;来到杭州就不得不提及西湖。杭州之美，美离不开自然景致，却也少不了人文风韵。如果西湖失去文化色泽，那它的自然风光估摸着只能算得上是一公园罢。大不及太湖，深不及钱湖。但是白居易与苏轼相继来此做官为政，并为西湖的历史涂抹上浓重的一笔。以及历来文人骚客的诗词歌赋加之民间传说，使得西湖——虽不及太湖之大，却诗篇众多；虽不及钱湖之深，但白苏二人却对她一往情深。&lt;br /&gt;
苏堤，是苏轼在治理西湖时用湖泥堆积而成。留下“水光潋滟晴方好，山色空蒙雨亦奇”的完美比喻。白堤，为储蓄湖水灌溉农田而建，原名白沙堤，白居易曾作有“最爱湖东行不足，绿杨阴里白沙堤”抒发情怀。
游船环湖一周,我拂着迎面吹来的风，看着三潭映月，苏堤白提，如今的游人如织，看着雷峰塔以及回荡在空中的传说，再看看西湖四周现代化的建筑。一种古今交织的错觉出现在我的脑海中，奇妙而美好，这就是杭州的感觉，杭州的印象。&lt;/p&gt;</content><author><name></name></author><summary type="html">象印杭州 杭州，一个静与动的完美结合；一段现代与古代的姻缘；一处自然与发展融洽相处的圣地。</summary></entry><entry><title type="html">我的Coding之路</title><link href="/jekyll/update/2017/08/01/%E6%88%91%E7%9A%84Coding%E4%B9%8B%E8%B7%AF.html" rel="alternate" type="text/html" title="我的Coding之路" /><published>2017-08-01T16:03:00+08:00</published><updated>2017-08-01T16:03:00+08:00</updated><id>/jekyll/update/2017/08/01/%E6%88%91%E7%9A%84Coding%E4%B9%8B%E8%B7%AF</id><content type="html" xml:base="/jekyll/update/2017/08/01/%E6%88%91%E7%9A%84Coding%E4%B9%8B%E8%B7%AF.html">&lt;h1&gt;我的Coding之路&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/programmer-min.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
       从小，我就对人工的，机械的事物感兴趣。提起编程，就可以追溯到我与机器人的渊源。小时候，还是处于对看得见，摸得着的东西比较感兴趣。从搭积木开始一步步接触到可编程主机。为了操控主机就势必得对它进行编程。当然，是拖动模块的图形化编程。十分好理解，但是限制也非常多。此外，要是程序一大，逻辑一复杂，就会很难更改和调试。&lt;br /&gt;
       这个时候我已经是小学三年级。偶尔听闻到学校有编程社团，以为也和图形化编程一般，不以为然。到了小学四年级，抱着看一看的心态，我进入了编程社团。我的第一门编程语言是Pascal，使用的IDE是FPC，记得版本是2.0.4（当然不是当时的最新版本）。&lt;br /&gt;
       我学起来很快，但是学校每星期一节的社团实在是不能让我学到什么。教起来拖沓迭代。也是四年级的暑假，我参加了区里的编程集训，这个夏令营虽然在现在看来没有教会我太多，但是醍醐灌顶地帮助我打下了基础，是不可或缺的。我对编程本身是真的有兴趣的，而绝非是对游戏或者电脑，在此期间，我会用每天新教的知识一步步搭建出一个游戏。这个游戏应该是我的第一个真真意义上可以玩的游戏，名字叫《星舰城市》。游戏做得是十分粗糙，不能存档，互动方式为“一问一答”……可以说缺点无数。这个游戏的源代码和可执行文件也已经丢失，无处可觅。但是这个游戏确实对我有划时代意义，很遗憾没能留下，它可以相当一些大一新生的游戏编程水平。&lt;br /&gt;
       随后，我又开发过一款游戏，名叫《二战风云》。想比起星舰城市，界面更为友好，采用了重新输出的方式来展现动画。虽说帧率低下，很晃眼睛，但是却也算是一个进步。这款游戏夭折，是我人生的第一场数据危机——当时，我又一个U盘，代码和可执行文件就只在U盘中有，到哪里就插上U盘开始编程，可谓十分方便。但是我对U盘的牢固性却疏忽了。一次，我的膝盖稍微一撇，把机箱上的U盘给撇断，我当时就傻了。整个人一怔，我的同班同学——当时帮我开发这个游戏的武器“数据库”，连忙帮我百度如何解决。可惜，因为物理损伤，已经没有任何挽回的余地了。大概出于对劳动付诸东流的悲痛，我的同学直呼我是骗子，而我也同样痛不欲生。&lt;br /&gt;
       此后是编程道路上略带黑暗色彩的时期。记得是某一年的五一节，我和我的同学被报上了一个编程培训班，老师据说是宁波市名师。事实上，第一节课开始，我对他的印象就不佳。&lt;br /&gt;
       当时在讲排序算法，在介绍选择排序的时候，老师直接打开画图，写上几个数字：“你们看，1小于3，所以把1放到这里。”讲了半天，我觉得只是人工执行一遍程序，也许是老师表达不出来。训练了半年，我的算法翻译（就是把步骤转化为代码）能力倒是得到了显著提升，这是在为未来成为码农做准备（苦笑）。当然，每一个接触编程的人最开始都会对枯燥的算法产生抵触情绪。而不幸的是，我恰恰是那种必须彻底理解才能牢记的人。这对我快速学习编程也是不利的。最让我发指的是，这里的人背离了我的原则，他们根本不热爱编程，也有着虚伪的人格，他们把编程当作升学的推进器，但是，这些人在升学之后又能学会什么？甚至有人问我：一年学编程能拿奖吗？我的答案是：不能也不要。我觉得，为了升学而学习自己不喜欢的东西还不如不学，这花费的时间和金钱比升学本身的价值更多。总之，我觉得这个培训班将近一年半的时间内，我学得并不舒服。&lt;br /&gt;
       在这一年半的时间里，我对外的探索也从未停止过。我学习了一门新语言——C，有了第一台自己的笔记本（虽然配置不佳）。我学习C的过程中，也受到过老师的批评，但是我并没有停止。如果我停下了，那今天我所有的项目都是不存在的。其中，有我至今还在支持的项目。比如GAMEOX和LEDIT。都是我在那时候开始写的。值得一提的是，我当时使用的是Turbo C作为IDE，而且还固执地认为Turbo C十分不错。的确，我在转到Linux之前都是那么认为的。这就牵扯到编程观念的变化，暂且不说。&lt;br /&gt;
       GAMEOX是同学之间流行的纸笔游戏的电子版本，当时功能十分简陋，不能判断胜负，只能算是一个电子棋盘。当时也只打算开发到这种程度。但是奈何有太多想法涌现，开始大规模的开发，开发总是一阵一阵的，而且出于强迫症，总会在一个功能没有BUG的情况下再开发下一个功能。所以我所有用C语言编写的项目都具有强劲的异常处理容错能力。不论用户输入什么，都不会轻易异常。（在此吐槽一下现在国内的软件、电器厂商，产品都是做到“能用”，随便乱按几下就会主板失效，做电子产品就是要皮实，不论是硬件还是软件）自己编写LEDIT时经常会出现莫名其妙的问题——比如光标乱跳，文字在上一行显示，光标却在下一行，方向键随便按一下就内存溢出。但是都被我一个个解决了，这个项目也代表着我当时的最高水平。&lt;br /&gt;
       时间很快来到了六年级的暑假。这是一个意义重大的时期，我来到了Linux平台。事实上，我对Linux系统很早就有耳闻。但是我却不敢去尝试，因为四五年级的时候我没有安装过操作系统，我也仅有这一台电脑，要是装坏了可真的神仙也无奈。
但是，我终究是忍不住的。所以，我开始在虚拟机中尝试。很快，摸清楚套路后决定在真机上尝试。为了避免双系统的繁琐步骤（我在此之前安装过Ubuntu与Windows 10双系统），我一气之下把Windows给格式化了，从此我就再也没有回到过Windows。我的第一个Linux发行版是Fedora，的确，这是一个优秀个发行版。慢慢的，我更多的去使用shell而不是GUI，Linux带给我的感觉也非常棒。我将我的两个项目移植到了Linux上。这个时候，虽然我能模拟出Turbo C，但是我已经不再使用它了。我渐渐得更加喜欢gcc和gdb的组合。Linux带给我了开源和现代化的编程理念，是我编程道路上的重要拐点。&lt;br /&gt;
       Linux新手难免不会去尝试各种发行版本，用了Fedora三个月之后，我就准备跳槽了。Archlinux是我最喜欢的发行版，但是安装步骤完全命令行，对我很不友好。所以我决定使用Archlinux的亲戚发行版——Manjaro。它确实安装简单，但是却带有浓重的Ubuntu风味，我也不喜欢。遂我开始安装Redhat系的CentOS，但是CentOS的内核和驱动还是21世纪初的版本，无法完美驱动我的笔记本，所以，还没有到一个星期，我就又换到了Debian。Debian非常优秀，但Stable版本太陈旧，无法安装jekyll。于是我又回到了Fedora。但是，Archlinux的诱惑还是很大，我无法抵挡。终于在今年3月，我安装了。除了网络问题，还是非常顺利的，因为我已经使用了有半年的Linux了。至今，我还在使用Archlinux，这是我使用时间最长的发新版。&lt;br /&gt;
       我又对LEDIT进行大量重构，使它具有现代编辑器的使用习惯。对GAMEOX加入了AI和保存以及智能判断模块。暑假，我又使用Python开发了Telegram机器人、自动拆分词根脚本、DHT爬虫等现代化的程序。Python的确强大，但是，我还是喜欢C的简洁和深沉。&lt;br /&gt;
       伴随着项目的开发，我也渐渐意识到算法的重要性，而我自己探索出来的写法和理解模式，是终身不会忘记的。&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;</content><author><name></name></author><summary type="html">我的Coding之路        从小，我就对人工的，机械的事物感兴趣。提起编程，就可以追溯到我与机器人的渊源。小时候，还是处于对看得见，摸得着的东西比较感兴趣。从搭积木开始一步步接触到可编程主机。为了操控主机就势必得对它进行编程。当然，是拖动模块的图形化编程。十分好理解，但是限制也非常多。此外，要是程序一大，逻辑一复杂，就会很难更改和调试。        这个时候我已经是小学三年级。偶尔听闻到学校有编程社团，以为也和图形化编程一般，不以为然。到了小学四年级，抱着看一看的心态，我进入了编程社团。我的第一门编程语言是Pascal，使用的IDE是FPC，记得版本是2.0.4（当然不是当时的最新版本）。        我学起来很快，但是学校每星期一节的社团实在是不能让我学到什么。教起来拖沓迭代。也是四年级的暑假，我参加了区里的编程集训，这个夏令营虽然在现在看来没有教会我太多，但是醍醐灌顶地帮助我打下了基础，是不可或缺的。我对编程本身是真的有兴趣的，而绝非是对游戏或者电脑，在此期间，我会用每天新教的知识一步步搭建出一个游戏。这个游戏应该是我的第一个真真意义上可以玩的游戏，名字叫《星舰城市》。游戏做得是十分粗糙，不能存档，互动方式为“一问一答”……可以说缺点无数。这个游戏的源代码和可执行文件也已经丢失，无处可觅。但是这个游戏确实对我有划时代意义，很遗憾没能留下，它可以相当一些大一新生的游戏编程水平。        随后，我又开发过一款游戏，名叫《二战风云》。想比起星舰城市，界面更为友好，采用了重新输出的方式来展现动画。虽说帧率低下，很晃眼睛，但是却也算是一个进步。这款游戏夭折，是我人生的第一场数据危机——当时，我又一个U盘，代码和可执行文件就只在U盘中有，到哪里就插上U盘开始编程，可谓十分方便。但是我对U盘的牢固性却疏忽了。一次，我的膝盖稍微一撇，把机箱上的U盘给撇断，我当时就傻了。整个人一怔，我的同班同学——当时帮我开发这个游戏的武器“数据库”，连忙帮我百度如何解决。可惜，因为物理损伤，已经没有任何挽回的余地了。大概出于对劳动付诸东流的悲痛，我的同学直呼我是骗子，而我也同样痛不欲生。        此后是编程道路上略带黑暗色彩的时期。记得是某一年的五一节，我和我的同学被报上了一个编程培训班，老师据说是宁波市名师。事实上，第一节课开始，我对他的印象就不佳。        当时在讲排序算法，在介绍选择排序的时候，老师直接打开画图，写上几个数字：“你们看，1小于3，所以把1放到这里。”讲了半天，我觉得只是人工执行一遍程序，也许是老师表达不出来。训练了半年，我的算法翻译（就是把步骤转化为代码）能力倒是得到了显著提升，这是在为未来成为码农做准备（苦笑）。当然，每一个接触编程的人最开始都会对枯燥的算法产生抵触情绪。而不幸的是，我恰恰是那种必须彻底理解才能牢记的人。这对我快速学习编程也是不利的。最让我发指的是，这里的人背离了我的原则，他们根本不热爱编程，也有着虚伪的人格，他们把编程当作升学的推进器，但是，这些人在升学之后又能学会什么？甚至有人问我：一年学编程能拿奖吗？我的答案是：不能也不要。我觉得，为了升学而学习自己不喜欢的东西还不如不学，这花费的时间和金钱比升学本身的价值更多。总之，我觉得这个培训班将近一年半的时间内，我学得并不舒服。        在这一年半的时间里，我对外的探索也从未停止过。我学习了一门新语言——C，有了第一台自己的笔记本（虽然配置不佳）。我学习C的过程中，也受到过老师的批评，但是我并没有停止。如果我停下了，那今天我所有的项目都是不存在的。其中，有我至今还在支持的项目。比如GAMEOX和LEDIT。都是我在那时候开始写的。值得一提的是，我当时使用的是Turbo C作为IDE，而且还固执地认为Turbo C十分不错。的确，我在转到Linux之前都是那么认为的。这就牵扯到编程观念的变化，暂且不说。        GAMEOX是同学之间流行的纸笔游戏的电子版本，当时功能十分简陋，不能判断胜负，只能算是一个电子棋盘。当时也只打算开发到这种程度。但是奈何有太多想法涌现，开始大规模的开发，开发总是一阵一阵的，而且出于强迫症，总会在一个功能没有BUG的情况下再开发下一个功能。所以我所有用C语言编写的项目都具有强劲的异常处理容错能力。不论用户输入什么，都不会轻易异常。（在此吐槽一下现在国内的软件、电器厂商，产品都是做到“能用”，随便乱按几下就会主板失效，做电子产品就是要皮实，不论是硬件还是软件）自己编写LEDIT时经常会出现莫名其妙的问题——比如光标乱跳，文字在上一行显示，光标却在下一行，方向键随便按一下就内存溢出。但是都被我一个个解决了，这个项目也代表着我当时的最高水平。        时间很快来到了六年级的暑假。这是一个意义重大的时期，我来到了Linux平台。事实上，我对Linux系统很早就有耳闻。但是我却不敢去尝试，因为四五年级的时候我没有安装过操作系统，我也仅有这一台电脑，要是装坏了可真的神仙也无奈。 但是，我终究是忍不住的。所以，我开始在虚拟机中尝试。很快，摸清楚套路后决定在真机上尝试。为了避免双系统的繁琐步骤（我在此之前安装过Ubuntu与Windows 10双系统），我一气之下把Windows给格式化了，从此我就再也没有回到过Windows。我的第一个Linux发行版是Fedora，的确，这是一个优秀个发行版。慢慢的，我更多的去使用shell而不是GUI，Linux带给我的感觉也非常棒。我将我的两个项目移植到了Linux上。这个时候，虽然我能模拟出Turbo C，但是我已经不再使用它了。我渐渐得更加喜欢gcc和gdb的组合。Linux带给我了开源和现代化的编程理念，是我编程道路上的重要拐点。        Linux新手难免不会去尝试各种发行版本，用了Fedora三个月之后，我就准备跳槽了。Archlinux是我最喜欢的发行版，但是安装步骤完全命令行，对我很不友好。所以我决定使用Archlinux的亲戚发行版——Manjaro。它确实安装简单，但是却带有浓重的Ubuntu风味，我也不喜欢。遂我开始安装Redhat系的CentOS，但是CentOS的内核和驱动还是21世纪初的版本，无法完美驱动我的笔记本，所以，还没有到一个星期，我就又换到了Debian。Debian非常优秀，但Stable版本太陈旧，无法安装jekyll。于是我又回到了Fedora。但是，Archlinux的诱惑还是很大，我无法抵挡。终于在今年3月，我安装了。除了网络问题，还是非常顺利的，因为我已经使用了有半年的Linux了。至今，我还在使用Archlinux，这是我使用时间最长的发新版。        我又对LEDIT进行大量重构，使它具有现代编辑器的使用习惯。对GAMEOX加入了AI和保存以及智能判断模块。暑假，我又使用Python开发了Telegram机器人、自动拆分词根脚本、DHT爬虫等现代化的程序。Python的确强大，但是，我还是喜欢C的简洁和深沉。        伴随着项目的开发，我也渐渐意识到算法的重要性，而我自己探索出来的写法和理解模式，是终身不会忘记的。</summary></entry><entry><title type="html">海淘初体验</title><link href="/jekyll/update/2017/07/23/%E6%B5%B7%E6%B7%98%E5%88%9D%E4%BD%93%E9%AA%8C.html" rel="alternate" type="text/html" title="海淘初体验" /><published>2017-07-23T20:31:00+08:00</published><updated>2017-07-23T20:31:00+08:00</updated><id>/jekyll/update/2017/07/23/%E6%B5%B7%E6%B7%98%E5%88%9D%E4%BD%93%E9%AA%8C</id><content type="html" xml:base="/jekyll/update/2017/07/23/%E6%B5%B7%E6%B7%98%E5%88%9D%E4%BD%93%E9%AA%8C.html">&lt;h1 id=&quot;海淘初体验&quot;&gt;海淘初体验&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/image/包裹.JPG&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这是我第一次在美国亚马逊购物，这是我第一次海淘和收到外国包裹的经历。谨以此篇记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;       我很早就听闻说国外的电商平台质量好，价格比国内便宜。而亚马逊作为国外最大的电商平台，更是早早在我心中埋下了“国外电商=亚马逊”的种子。&lt;br /&gt;
       但是对于清关、派送、支付等一系列麻烦的手续以及国际船运的慢速流程，我始终不敢下手，尽管我们已经有过许多国内的网购经历。最重要的是，每每想下单的时候，总是会在脑海中浮现出各种收不到，派送错误，扣款错误，对方未发货而联系不上的情景，宛如一盆冷水浇在我头上。&lt;br /&gt;
       不过，亚马逊的低价实在是太诱人了，特别是对于国内的一些高附加值产品，不知道是利润翻了多少倍！这一次，我看中的是ALMY Alstar的一支限量色钢笔。在实体店的价格要580RMB，但是在美国亚马逊上只要$32.06，也就是说只要220.89RMB，这意味着可以便宜一半还要多140元！要知道，220元可是连LAMY Safari也买不起的。虽说比淘宝贵20元，但是可以绝对保证是正品。所以，我决定要买这支笔。&lt;br /&gt;
       终于，我在价格和品质上说服了妈妈。但是，我也是第一次购买，心里很是没底。在填写收货地址的时候我就遇到了大麻烦，由于美国是有州以及明确的邮编(ZIP CODE)的，而且他们大多数不是住在小区中，都有自己的别墅。所以，在这么短的地址栏中如何用拼音填写详细地址，我又犯了难。最终，我决定填写为妈妈单位的地址。后面的过程很顺利，绑定了信用卡，完成了付款。&lt;br /&gt;
       但是，我很不适应的是，我付款之后，银行并没有给我发来扣款信息，以至于我都无法确认我是否购买了。带着这种疑惑与焦虑，我匆匆度过了这一天。我忐忑地等待着扣款信息。&lt;br /&gt;
       这一天晚上，我自作聪明地想——最近英国脱欧，欧洲与英国的经济都是持续低迷，能不能借着汇率省下一笔呢？我浏览了德国亚马逊的同款产品，的确便宜，只要170RMB左右。于是我偷着乐地取消了Preparing for package的订单。但是很快，我就发现，德国亚马逊并不支持International Shipment(国际直邮)，也就意味着需要转运公司。但是转运一来速度慢，不稳定，而来按重量计价，贵。真是沮丧，所以，我还是选择买个安心，又重新提交了订单。正是这一错误的抉择让我多等了好几天。&lt;br /&gt;
       第二次的订单提交后，我又在交易记录上发现了问题——多扣了一美元？这是为什么？为什么我要凭白无故地多支付一美元？第二天，我对亚马逊的客服发了一封邮件，详细询问了情况。原来，这一美元是用来检测银行卡是否丢失以及卡内的余额，很快就会退还。&lt;br /&gt;
       接下来就是漫长的等待。这次的国际直邮耗费了将近1个月的时间。我从开始每天焦急地查看到后来渐渐淡忘了这件事。突然有一天，通关网发来了一条信息，要求我进行报关信息地填写，我实在按捺不住自己的兴奋，在核对订单进行了填写。又过了许久，包裹终于到达中国了！最后的几天USPS很快就派送到了。&lt;br /&gt;
       由于过了好些日子，收到包裹时没有那么兴奋了。但是真正看到笔时还是真心喜欢。说明，这次的选择是正确的。
&lt;br /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-2.JPG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-1.JPG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-4.JPG&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/image/LAMY/LAMY-3.JPG&quot; alt=&quot;&quot; /&gt;
       每每想到这是大洋彼岸的快递，我总会感叹互联网的神奇，至今，我还是有点不可思议。但是亚马逊真的做到了，除了中国市场才进入1～2年，亚马逊在其他国家已经经营了15～20年之久了。而23年前，亚马逊诞生之时，阿里巴巴和京东根本就不存在。而亚马逊也以服务质量著称，客服有着十足的权力，而售后服务却是中国电商一直很头痛的问题，也是用户的痛点。只要亚马逊在中国能继续保持质优价低服务好的特点，再配备中国发达的快递业务，基本可以碾压淘宝和京东。&lt;br /&gt;
       我一直认为只有国外好的产品不断给国内产业加压，才能刺激中国公司的不断成长。举一个反面例子：百度。自从2010年Google离开中国之后，近年来不知道横向发展成什么样子。一家没有样子的科技公司，竞价排名浪费我们时间也就算了，还闹出人民，除了整合本地化外也就真的没有优点了。再比如，腾讯。自己的QQ没有聊天软件的样子，除了用户基数，哪一个能有Messager或Telegram做得好？也是时候引进一下外资企业，让用户得到更优质的服务，让企业好好纵向发展一下了！&lt;/p&gt;</content><author><name></name></author><summary type="html">海淘初体验 这是我第一次在美国亚马逊购物，这是我第一次海淘和收到外国包裹的经历。谨以此篇记录。</summary></entry><entry><title type="html">DHT网络详解与DHT爬虫编写指南</title><link href="/jekyll/update/2017/07/22/DHT%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3%E4%B8%8EDHT%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97.html" rel="alternate" type="text/html" title="DHT网络详解与DHT爬虫编写指南" /><published>2017-07-22T14:52:00+08:00</published><updated>2017-07-22T14:52:00+08:00</updated><id>/jekyll/update/2017/07/22/DHT%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3%E4%B8%8EDHT%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97</id><content type="html" xml:base="/jekyll/update/2017/07/22/DHT%E7%BD%91%E7%BB%9C%E8%AF%A6%E8%A7%A3%E4%B8%8EDHT%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97.html">&lt;h1 id=&quot;dht网络详解与dht爬虫编写指南&quot;&gt;DHT网络详解与DHT爬虫编写指南&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/DHT-Spider.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/LEXUGE/DHT-Spider&quot;&gt;DHT-Spider项目主页&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;前言与背景：&lt;br /&gt;
随着网络的不断发展，我们中的大多数应该都下载过东西。如果你是一位电影爱好者或开源软件爱好者。那你一定使用过P2P下载。其中，主流的就是BT下载。&lt;br /&gt;
虽然，BT是P2P下载，但实际上，他并不是完全P2P的。它需要Tracker来通告节点，进行信息交换。所以，近年来的版权保护者与政府部门一直在封禁和打击Tracker。比较近的例子就是BT Sync的Tracker被封禁，导致0节点的惨剧。&lt;br /&gt;
那能否做到真正的P2P呢？当然可以，这需要的是DHT(Distributed Hash Table 分布式哈系表)来进行传输，这就是一种去中心化网络。每个加入这个网络的节点都要负责维护一张表格用来存储网络中其他人和资源的信息。任何一个节点的损坏都不足以对整个网络造成致命影响。&lt;br /&gt;
但是就是因为这种隐秘性的特点，资源也是不为人知。尽管目前有许多的BT分享网站(比如：海盗湾),但是他们的中心化意味着他们有随时被关停的可能。所以，拥有一个自己的DHT爬虫来进行资源嗅探是很重要的。
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Kademlia网络：
    &lt;ul&gt;
      &lt;li&gt;Kademlia一个分散式杂凑表实现的协议，专门为P2P计算机网络设计。&lt;br /&gt;
该网络规定了网络的结构与节点信息查询方式，节点与结点之间使用UDP进行通讯。每个结点都有一个唯一的身份标识(节点ID)，所有的节点都维护着一张覆盖网。网络上的文件散列与节点ID直接对应，表示着哪个节点存储着的文件和相关信息。&lt;/li&gt;
      &lt;li&gt;Kademlia是用XOR进行节点距离的计算的。这样可以快速得到与目标节点(target)最近的节点(也有可能就是target),XOR的算法是bit位如果相等就记作0，否则为1，这意味着:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.当两个节点高位数值越为相同，XOR的结果也就越小，距离也就越小(这点上，无论是数学还是实际都是如此)。  
2.具有反向对称性(A XOR B与B XOR A是相等的)
3.XOR符合三角形的性质(即：a+b&amp;gt;c),这点对于路由表的寻路起着巨大作用
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;所以，XOR是作为距离计算的最佳算法。此外，XOR还能大幅增加寻路速度：可以保证每次与目标节点(target)靠近1 bit，这意味着：对于一个n位的节点ID，我们只需要至多log2(N)就可以找到目标节点。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Kademlia的路由表采用的是列表-条目的方式。每个条目由节点ID对应其的IP:port或资源等。对于一个N位的节点ID，它会拥有N个K桶(也就是说每个桶只能有K个节点)。其中，第1个桶距离节点最远(也就是最高位与节点ID的最高位取反)，第二个就是第二位，以此类推。注意，这里的K不一定能存储下所有的节点(也就是说不是完全的)。这样的存储方式有别于二叉树，进行了很好的分类，这可以让FIND_NODE操作返回更为精确和快速：当无法找到一模一样节点ID时，直接返回可能节点(表中与目标ID最近的节点)所在K桶中的K个元素即可(因为K桶内的元素与可能节点最近，最有可能和可能节点一起存储有目标ID)。&lt;/li&gt;
      &lt;li&gt;Kademlia的节点查询(FIND_NODE)：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.发起者在自己路由表中寻找与目标ID最近的K个节点发起FIND_NODE请求。
2.接受者在接到以后，如果在自己的路由表中找到了目标节点，则返回该条目，否则返回可能节点所在K桶的K个节点条目
3.发起者在自己发起请求的目标所在的K桶中更新返回结果，使K桶始终保持最优状态。
4.发起者递归发起，直到找到目标节点。(如果没有发现节点更为接近的情况，那么就终止查询)  
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Kademlia加入网络：&lt;br /&gt;
Kademlia网络中的新节点加入需要一个引导节点作为介绍人。也就是说你必须先知道引导节点的IP:port。当你连接上引导节点时，新节点会用FIND_NODE自己的方式来使引导节点去询问自己的邻居节点。之后，邻居节点继续询问邻居节点，直到引导节点找到新节点。这一操作会一路对邻居的K桶进行刷新。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;KPPC协议：&lt;br /&gt;
这是一种基于Kademlia的改进协议，支持四种消息格式：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.ping 检测节点是否可连接
2.find_node 得到给定节点ID的对应信息(IP:port)
3.get_peers 根据infohash提供对应信息(IP:port)
4.announce_peer 宣布自己正在下载torrent文件
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;还需要注意，这里的消息包传送用的是bencode加密后的结果，关于bencode的加密方式：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.string: 字符是以这种方式编码的: &amp;lt;字符串长度&amp;gt;:&amp;lt;字符串&amp;gt;
如 hell: 4:hell
2.integer: 整数是一这种方式编码的: i&amp;lt;整数&amp;gt;e
如 1999: i1999e
3.list: 列表是一这种方式编码的: l[数据1][数据2][数据3][…]e
如列表 [hello, world, 101]：l5:hello5:worldi101ee
4.dictionary: 字典是一这种方式编码的: d[key1][value1][key2][value2][…]e，其中 key 必须是 string 而且按照字母顺序排序
如字典 {aa:100, bb:bb, cc:200}： d2:aai100e2:bb2:bb2:cci200ee
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;KPPC消息包的基本元素：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.t关键字: 每条消息都包含 t 关键字，它是一个代表了 transaction ID 的字符串。transaction ID 由请求节点产生，并且回复中要包含回显该字段(挑战-响应模型)，所以回复可能对应一个节点的多个请求。transaction ID 应当被编码为一个短的二进制字符串，比如 2 个字节，这样就可以对应 2^16 个请求
2.y关键字: 它由一个字节组成，表明这个消息的类型。y 对应的值有三种情况
 1) q 表示请求(请求Queries): q类型的消息它包含 2 个附加的关键字 q 和 a
   1.1) 关键字 q: 是字符串类型，包含了请求的方法名字(get_peers/announce_peer/ping/find_node)
   1.2) 关键字 a: 一个字典类型包含了请求所附加的参数(info_hash/id..)
 2) r 表示回复(回复 Responses): 包含了返回的值。发送回复消息是在正确解析了请求消息的基础上完成的，包含了一个附加的关键字 r。关键字 r 是字典类型
   2.1) id: peer节点id号或者下一跳DHT节点
           2.2) nodes&quot;: &quot;&quot;
           2.3) token: token
 3) e 表示错误(错误 Errors): 包含一个附加的关键字 e，关键字 e 是列表类型
   3.1) 第一个元素是数字类型，表明了错误码，当一个请求不能解析或出错时，错误包将被发送。下表描述了可能出现的错误码
   201: 一般错误
   202: 服务错误
   203: 协议错误，比如不规范的包，无效的参数，或者错误的 toke
   204: 未知方法
   3.2) 第二个元素是字符串类型，表明了错误信息
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;ping请求：&lt;br /&gt;
ping用于检测节点是否可连接，包含一个节点ID，回复也包含回复者的节点ID。&lt;/li&gt;
      &lt;li&gt;find_node请求：&lt;br /&gt;
给定请求节点(被find_node的节点)的ID和目标ID,回复目标ID的info或者是可能节0点所在K桶的K个节点。&lt;/li&gt;
      &lt;li&gt;get_peers请求：
包含请求节点的ID和infohash,给出目标ID的info&lt;/li&gt;
      &lt;li&gt;announce_peer请求：
包含4个参数：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.id:包含请求节点的ID
2.info_hash:包含torrent文件的info_hash
3.port:表示peer正在下载的端口
4.token:这里的token要与get_peers中得到的token相同才可以证明该announce_peer不是伪造的
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;相关链接:&lt;br /&gt;
&lt;a href=&quot;http://www.bittorrent.org/beps/bep_0005.html&quot;&gt;BEP_0005&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DHT-Spider实现：&lt;br /&gt;
DHT这种P2P网络在对抗攻击与封锁的同时也有如下的缺点：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.伪造攻击: 有些不听话的用户可能会在DHT网络里捣乱，譬如说撒谎，明明自己不是奥巴马，却偏说自己是奥巴马，这样会误导其他人无法正常获取想要的资源
2.嗅探攻击: 另外，用户在DHT网络里的隐私可能会被窃听，因为在DHT网络里跟其他用户交换资源的时候，难免会暴露自己的IP地址，所以别人就会知道你有什么资源，你在请求什么资源了。这也是目前DHT网络里一直存在的一个弱点
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;我编写的&lt;a href=&quot;https://github.com/LEXUGE/DHT-Spider&quot;&gt;DHT-Spider&lt;/a&gt;能够通过token和infohash的双重检查来解决第一种缺点。但目前无法解决第二种。&lt;br /&gt;
实际上，爬虫的主要思路是不断地主动find_node来扩充自己的路由表，然后积极回应get_peers和announce_peer,infohash的主要来源也是这两种请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BitTorrent文件编码与格式：&lt;br /&gt;
整个&lt;code class=&quot;highlighter-rouge&quot;&gt;.torrent&lt;/code&gt;文件采用的是bencode加密，最主要的部分是info字段，是一个字典，包含了文件名，文件大小，infohash，以及sha1散列簇。torrent文件的核心也在此。&lt;br /&gt;
作为一个trackless的脚本，我们不需要添加其他的东西(announce等)，这样可以保证DHT的稳定性和隐蔽性。&lt;br /&gt;
值得注意的是：在编辑torrent文件时，请使用16进制编辑器(比如ghex)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Peer Wire协议：&lt;br /&gt;
在BitTorrent中，节点的寻址通过DHT实现，但是，获取了IP:port之后，实际的数据交换需要Peer Wire协议。
    &lt;ul&gt;
      &lt;li&gt;握手：&lt;br /&gt;
Peer Wire协议是Peer之间的通信协议，通常由一个握手消息开始。
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pstrlen&amp;gt;&amp;lt;pstr&amp;gt;&amp;lt;reserved&amp;gt;&amp;lt;info_hash&amp;gt;&amp;lt;peer_id&amp;gt;&lt;/code&gt;&lt;br /&gt;
在BitTorrent协议的v1.0版本, pstrlen = 19, pstr = “BitTorrent protocol”，info_hash是上文中提到的磁力链接中的btih&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BitTorrent协议扩展与ut_metadata：&lt;br /&gt;
借助DHT的寻址以及Peer Wire的握手，接下来就可以获取metadata了(包含info字段)。&lt;br /&gt;
Metadata被分块，每个块有16KB(16384字节)，Metadata块从0开始索引，所有块的大小都是16KB，除了最后一个块可能比16KB小。
    &lt;ul&gt;
      &lt;li&gt;Extension头部：
Metadata的扩展使用BEP_0010进行声明，在头部的m字典加入ut_metadata选项并制定metadata的字节数。&lt;/li&gt;
      &lt;li&gt;Extension消息：
这里的消息采用bencode编码，有三种:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.request(请求):
请求消息并不在字典中附加任何关键字，这个消息的回复应当来自支持这个扩展的peer，是一个reject或者data消息，回复必须和请求所指出的片相同
Peer必须保证它所发送的每个片都通过了infohash的检测。即直到peer获得了整个metadata并通过了infohash的验证，才能够发送片(即一个peer应该保证自己已经完整从其他peer中拷贝了一份相同的资源文件后，才能继续响应其他节点的拷贝请求)。Peers没有获得整个metadata时，对收到的所有metadata请求都必须直接回复reject消息
{'msg_type': 0, 'piece': 0}
d8:msg_typei0e5:piecei0ee
这代表请求消息在请求metadata的第一片
1.data
这个data消息需要在字典中添加一个新的字段，&quot;total_size&quot;.这个关键字段和extension头的&quot;metadata_size&quot;有相同的含义，这是一个整型
Metadata片被添加到bencode字典后面，他不是字典的一部分，但是是消息的一部分(必须包括长度前缀)。
如果这个片是metadata的最后一个片，他可能小于16KB。如果它不是metadata的最后一片，那大小必须是16KB
{'msg_type': 1, 'piece': 0, 'total_size': 3425}
d8:msg_typei1e5:piecei0e10:total_sizei34256eexxxxxxxx...
x表示二进制数据(metadata)
2.reject
Reject消息没有附件的关键字。它的意思是peer没有请求的这个metadata片信息
在客户端收到收到一定数目的消息后，可以通过拒绝请求消息来进行洪泛攻击保护。尤其在metadata的数目乘上一个因子时
{'msg_type': 2, 'piece': 0}
d8:msg_typei1e5:piecei0ee
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Extension支持交互：&lt;br /&gt;
根据BEP_0010的规定，扩展消息在Peer Wire之后发出，为一个bencode编码的字典：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e:0,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ipv4:xxx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ipv6:xxx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;complete_ago:1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;m:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;upload_only:3,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;lt_donthave:7,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_holepunch:4,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_metadata:2,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_pex:1,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_comment:6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;matadata_size:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45377&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;p:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33733&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;reqq:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;v:BitTorrent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yp:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19616&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;yourip:xxx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.m:是一个字典，表示客户端支持的所有扩展以及每个扩展的编号&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_pex:表示该客户端支持PEX(Peer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Exchange)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ut_metadata表示支持BEP&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-0009&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(也就是交换种子文件的metadata)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;通知交互完成之后，按[“msg_type”: 0, “piece”: piece]的格式逐块向对方请求metadata,最后进行拼接形成info字段。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;校验infohash&amp;amp;收尾：&lt;br /&gt;
这一步比较简单，直接对获得的metadata进行转字符串再进行sha1处理即可。&lt;br /&gt;
之后再与已有infohash进行比对。&lt;br /&gt;
最后对信息进行输出和存储。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后，就完成了！&lt;br /&gt;
具体脚本使用指南参考我的项目，在此不再详述。&lt;/p&gt;</content><author><name></name></author><summary type="html">DHT网络详解与DHT爬虫编写指南 DHT-Spider项目主页 前言与背景： 随着网络的不断发展，我们中的大多数应该都下载过东西。如果你是一位电影爱好者或开源软件爱好者。那你一定使用过P2P下载。其中，主流的就是BT下载。 虽然，BT是P2P下载，但实际上，他并不是完全P2P的。它需要Tracker来通告节点，进行信息交换。所以，近年来的版权保护者与政府部门一直在封禁和打击Tracker。比较近的例子就是BT Sync的Tracker被封禁，导致0节点的惨剧。 那能否做到真正的P2P呢？当然可以，这需要的是DHT(Distributed Hash Table 分布式哈系表)来进行传输，这就是一种去中心化网络。每个加入这个网络的节点都要负责维护一张表格用来存储网络中其他人和资源的信息。任何一个节点的损坏都不足以对整个网络造成致命影响。 但是就是因为这种隐秘性的特点，资源也是不为人知。尽管目前有许多的BT分享网站(比如：海盗湾),但是他们的中心化意味着他们有随时被关停的可能。所以，拥有一个自己的DHT爬虫来进行资源嗅探是很重要的。 Kademlia网络： Kademlia一个分散式杂凑表实现的协议，专门为P2P计算机网络设计。 该网络规定了网络的结构与节点信息查询方式，节点与结点之间使用UDP进行通讯。每个结点都有一个唯一的身份标识(节点ID)，所有的节点都维护着一张覆盖网。网络上的文件散列与节点ID直接对应，表示着哪个节点存储着的文件和相关信息。 Kademlia是用XOR进行节点距离的计算的。这样可以快速得到与目标节点(target)最近的节点(也有可能就是target),XOR的算法是bit位如果相等就记作0，否则为1，这意味着: 1.当两个节点高位数值越为相同，XOR的结果也就越小，距离也就越小(这点上，无论是数学还是实际都是如此)。 2.具有反向对称性(A XOR B与B XOR A是相等的) 3.XOR符合三角形的性质(即：a+b&amp;gt;c),这点对于路由表的寻路起着巨大作用 所以，XOR是作为距离计算的最佳算法。此外，XOR还能大幅增加寻路速度：可以保证每次与目标节点(target)靠近1 bit，这意味着：对于一个n位的节点ID，我们只需要至多log2(N)就可以找到目标节点。 Kademlia的路由表采用的是列表-条目的方式。每个条目由节点ID对应其的IP:port或资源等。对于一个N位的节点ID，它会拥有N个K桶(也就是说每个桶只能有K个节点)。其中，第1个桶距离节点最远(也就是最高位与节点ID的最高位取反)，第二个就是第二位，以此类推。注意，这里的K不一定能存储下所有的节点(也就是说不是完全的)。这样的存储方式有别于二叉树，进行了很好的分类，这可以让FIND_NODE操作返回更为精确和快速：当无法找到一模一样节点ID时，直接返回可能节点(表中与目标ID最近的节点)所在K桶中的K个元素即可(因为K桶内的元素与可能节点最近，最有可能和可能节点一起存储有目标ID)。 Kademlia的节点查询(FIND_NODE)： 1.发起者在自己路由表中寻找与目标ID最近的K个节点发起FIND_NODE请求。 2.接受者在接到以后，如果在自己的路由表中找到了目标节点，则返回该条目，否则返回可能节点所在K桶的K个节点条目 3.发起者在自己发起请求的目标所在的K桶中更新返回结果，使K桶始终保持最优状态。 4.发起者递归发起，直到找到目标节点。(如果没有发现节点更为接近的情况，那么就终止查询) Kademlia加入网络： Kademlia网络中的新节点加入需要一个引导节点作为介绍人。也就是说你必须先知道引导节点的IP:port。当你连接上引导节点时，新节点会用FIND_NODE自己的方式来使引导节点去询问自己的邻居节点。之后，邻居节点继续询问邻居节点，直到引导节点找到新节点。这一操作会一路对邻居的K桶进行刷新。</summary></entry><entry><title type="html">Jekyll配置指北</title><link href="/jekyll/update/2017/07/21/Jekyll%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97.html" rel="alternate" type="text/html" title="Jekyll配置指北" /><published>2017-07-21T11:54:00+08:00</published><updated>2017-07-21T11:54:00+08:00</updated><id>/jekyll/update/2017/07/21/Jekyll%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97</id><content type="html" xml:base="/jekyll/update/2017/07/21/Jekyll%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97.html">&lt;h1&gt;Jekyll配置指北&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
本站的每一处都可以见到原子效果动态背景，科技感十足。实际上，这是一个JS脚本。&lt;br /&gt;
以Jekyll的原生主题minima为例，我们进行配置。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;获取minima主题的绝对路径：&lt;br /&gt;
在高版本的Jekyll中，minima是隐藏的。所以我们需要获取绝对路径。&lt;br /&gt;
在你的BLOG的根目录下：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle show minima
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;这会输出minima的绝对路径。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;获取配置好的主题：&lt;br /&gt;
&lt;a href=&quot;/download/minima-2.1.zip&quot;&gt;Jekyll-minima-科技感配置&lt;/a&gt;&lt;br /&gt;
下载好后，解压，将particles.js剪切到BLOG的根目录，并将剩下的整个配置文件夹替换原来的minima。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm -rf [minima的绝对路径]
sudo cp -r minima-2.1.0 [minima的绝对路径减少一级]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;完成!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Jekyll配置指北 本站的每一处都可以见到原子效果动态背景，科技感十足。实际上，这是一个JS脚本。 以Jekyll的原生主题minima为例，我们进行配置。 获取minima主题的绝对路径： 在高版本的Jekyll中，minima是隐藏的。所以我们需要获取绝对路径。 在你的BLOG的根目录下： bundle show minima 这会输出minima的绝对路径。 获取配置好的主题： Jekyll-minima-科技感配置 下载好后，解压，将particles.js剪切到BLOG的根目录，并将剩下的整个配置文件夹替换原来的minima。 sudo rm -rf [minima的绝对路径] sudo cp -r minima-2.1.0 [minima的绝对路径减少一级] 完成!</summary></entry><entry><title type="html">漫话“共享”</title><link href="/jekyll/update/2017/07/16/%E6%BC%AB%E8%AF%9D-%E5%85%B1%E4%BA%AB.html" rel="alternate" type="text/html" title="漫话“共享”" /><published>2017-07-16T21:01:00+08:00</published><updated>2017-07-16T21:01:00+08:00</updated><id>/jekyll/update/2017/07/16/%E6%BC%AB%E8%AF%9D%E2%80%9C%E5%85%B1%E4%BA%AB%E2%80%9D</id><content type="html" xml:base="/jekyll/update/2017/07/16/%E6%BC%AB%E8%AF%9D-%E5%85%B1%E4%BA%AB.html">&lt;h1&gt;漫话“共享”&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/image/共享单车.jpg&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;共享经济为人们带来许多生活上的方便，我们可以随时享受出行的便利，直接扫玛骑上共享单车。更早的，2016年时的“互联网出租车”、“专车”等服务也是共享经济的体现。好处不必多说，实实在在的作用也在生活中有所体现。但是，“共享”真的能“经济化”吗？这篇文章将不会谈论表象上的问题，诸如单车乱丢等，而是会窥探共享经济的本质，共享经济究竟是不是披着羊皮的狼？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先，我们需要知道共享经济是什么。共享经济是指拥有闲置资源的机构或个人有偿让渡资源使用权给他人，让渡者获取回报，分享者利用分享自己的闲置资源创造价值。实际上，作为这种人与人真诚交换的，共产主义的“各尽所能，按需分配”很早就已经提出了。共享经济只是搭着共产主义的顺风车而以。&lt;br /&gt;
&lt;br /&gt;
甚至，共享经济还时曲解共产主义的。共产主义的“物质生产极大丰富，各尽所能，按需分配”实际上的含义是：随着我们生产力的提高，每个人将自己的一部分劳动力贡献给社会，社会集合起来后，我们再向社会索取我们需要的一部分。再这当中，强调的是贡献和索取的平衡，其中的“社会”的存在只是中转站而以，并不索取什么。但是现在，共享经济做的又是什么呢？以专车为例，网约车平台既不提供车辆，又不为司机提供安全保障，同时，这也是对消费者安全的不负责。实际上，这是阉割了的共产主义，把共产主义作为一种交易的方式存在，本身不符合共产主义的意义，但在资本主义当道的世界中也无可厚非。但其次，最让人痛恨的是，网约车平台乘机成为了“社会”的角色，本身并不对双方负责还要抽取利润，简直就是新时代的地主，甚至比地主还不如。因为他们的“地”也不是自己的。这样一种平台的出现，除了内心中还也还不清的道德罪，还有什么需要承担的呢？&lt;br /&gt;
&lt;br /&gt;
不光是自己淌着灰色地带，共享经济还带来许多浅层的社会问题。共享经济公司宣称是让社会变得更美好。但是，双方都是普通人的情况下，他们的服务质量可靠吗？我们实际上在选择共享经济的同时放弃了法律的保护。作为一个处于灰色地带的行业，双方都不需要严格履行职责，我们在获取便利的同时其实放下了法律武器。你试想过吗：你乘坐的专车司机不认路，你乘坐的共享单车被人吐过唾沫。我们又找谁去说法？我们既是使用者又是劳动者，公司完全可以试图把义务撇得一干二净。到头来还是我们吃亏。&lt;br /&gt;
&lt;br /&gt;
既是上面的问题被解决，共享主义这个“资本主义”和“共产主义”的混合产物照样还是面临着巨大的问题：资源分配。共享经济的原意是希望资源平等分配，甚至一度被认为是劫富济贫的罗宾汉一般的存在。但是，以一个很简单的例子说明：现在，在一二线城市，我们想要一辆普通的出租车是不是更难更贵了？老年人呢？没有手机的人呢？他们还能打到车吗？很显然这一切都变得困难起来，但是实际上，出租车的数量并没有变化，但是越来越低的门槛和低价低质的服务不得不让传统出租车行业为服务涨价。老年人，原本就并不怎能打到车的群体，现在更是丧失了打车的权力。这一切都是共享经济造成的，原本是为了平分资源，现在还是落到了资源集中的地步。原本为了降低门槛现在反而提高了弱势群体的门槛。&lt;br /&gt;
&lt;br /&gt;
试想一下，共享单车的总使用人数总是要比投放数量多的，这意味着公司可以有一大笔并不受到风险的资金可以去做别的事，一目前的用户基数来看，这不会是一笔小数目，这笔钱他们在干什么，怎么干，我们清楚吗，我们能监管吗？我们甚至在放弃自己的监管权力。共享经济背后的公司们以非共享公开的理念做事，打着共享的幌子，进行融资回扣。这样的公司本身就是背道而驰的。&lt;br /&gt;
&lt;br /&gt;
如同同时期许多的互联网泡沫一样，我们人类社会的发展还没能发展到如此乌邦托的地步，我们的自身水平还为如此发达。我们最终还是需要法律来规范共享经济的行为，让一切又归可循。共享经济并不一定是错的，真正的成功是在未来的某一刻。&lt;/p&gt;</content><author><name></name></author><summary type="html">漫话“共享” 共享经济为人们带来许多生活上的方便，我们可以随时享受出行的便利，直接扫玛骑上共享单车。更早的，2016年时的“互联网出租车”、“专车”等服务也是共享经济的体现。好处不必多说，实实在在的作用也在生活中有所体现。但是，“共享”真的能“经济化”吗？这篇文章将不会谈论表象上的问题，诸如单车乱丢等，而是会窥探共享经济的本质，共享经济究竟是不是披着羊皮的狼？</summary></entry><entry><title type="html">为梦仰望</title><link href="/jekyll/update/2017/07/10/%E4%B8%BA%E6%A2%A6%E4%BB%B0%E6%9C%9B.html" rel="alternate" type="text/html" title="为梦仰望" /><published>2017-07-10T20:18:00+08:00</published><updated>2017-07-10T20:18:00+08:00</updated><id>/jekyll/update/2017/07/10/%E4%B8%BA%E6%A2%A6%E4%BB%B0%E6%9C%9B</id><content type="html" xml:base="/jekyll/update/2017/07/10/%E4%B8%BA%E6%A2%A6%E4%BB%B0%E6%9C%9B.html">&lt;h1&gt;为梦仰望  ——电影《冈仁波齐》观后感&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;No Fear In My Heart: &lt;audio src=&quot;/music/No Fear In My Heart.mp3&quot; controls=&quot;controls&quot; loop=&quot;loop&quot;&gt;&lt;/audio&gt;&lt;br /&gt;
&lt;br /&gt;
这是一个关于信仰的故事，这是一个关于每个生命内心的呐喊，这是一段对追随信仰的记录。&lt;br /&gt;
电影讲述了一支真实的朝圣队伍，在藏历新年从芒康朝拜去拉萨，尔后又去往神山冈仁波齐朝圣的故事。这一年正是神山冈仁波齐的本命年。每一个人都怀揣着自己的梦想、希望与抱负，但却走在了一起，11人踏上了历时一年，长达2000公里的朝圣之路。&lt;br /&gt;
他们的每个人都有自己的生活追求与梦想，但却又是什么使他们团结得走到一起？是信仰？是，然而又不全是。他们都信仰着藏传佛教，信仰着冈仁波齐，但是因为梦想不同，他们的信念不同，对信仰的看法也不同。&lt;br /&gt;
影片中，各个角色都曾发表过自己对上天的看法。有人曾经说过：“自己并没有做过什么对不起人的事情，但是为何自己家盖房子就会死二伤二呢？”这事实上比任何地方的朝圣者都要来的真实，他们反映出信仰者们对信仰的怀疑。之后，又有人说：“磕头磕出血，只能说是你磕得用心，磕得虔诚，是对信仰也是对自己的虔诚。”着表现出来了人们对于信仰怀疑之后的包容。&lt;br /&gt;
人，总需要仰望点什么。为梦仰望，为在自己的梦想选择自己的信仰。信仰和梦想，如同诗和远方，诗和信仰，不切实际但给你执着的内心，而梦想和远方，是对未来的渴望与眺望。执着得久，走得越久，望得越远，走得越远。虽然，我们不一定走到了梦想的位置，但他们带动着我们向远方前进。你得远方可以不切实际，可以天马行空，只要你对他有足够虔诚的信仰，并且不忘初心。那么你一定可以到达你意想不到的地方，得到充满惊喜的未来。&lt;br /&gt;
在拉萨的拍摄现场，片中朝圣者因为配合拍摄，被其他朝圣者吐口水，一度放弃拍摄。直到一位喇嘛开导：“如果你们觉得做的事是正确的，那又何必害怕别人朝你吐口水呢。”诚然如此，只要你觉得正确，又何必害怕？这个世界上没有什么生活方式是完全正确的，远方不是终点，达不到也不必遗憾，但是我们必须接受平凡的自我，去大胆地想象，去大胆地做，又何必在意或害怕别人的看法呢？著名法国哲学家萨特说过：“他人即地狱”。我们不要因为成为“对象我”而失去对初心的追求。&lt;br /&gt;
信仰，可以是任何东西，可以是一个项目，一门技术，一个伟人等等。但它必须超脱功利价值的存在，这样，信仰才会“有趣”。为梦想二存在的信仰才是有价值的。&lt;br /&gt;
如同影片中屠夫的赎罪，他要为自己的灵魂的赎罪，这就是对自己价值的提升，所以，他信仰了。&lt;br /&gt;
若干年后，我们可能会嘲笑自己幼稚，但是无论如何，为梦仰望，接受平凡而又不甘平凡，努力活出最好的我，不为未来留下遗憾。&lt;/p&gt;</content><author><name></name></author><summary type="html">为梦仰望 ——电影《冈仁波齐》观后感 No Fear In My Heart: 这是一个关于信仰的故事，这是一个关于每个生命内心的呐喊，这是一段对追随信仰的记录。 电影讲述了一支真实的朝圣队伍，在藏历新年从芒康朝拜去拉萨，尔后又去往神山冈仁波齐朝圣的故事。这一年正是神山冈仁波齐的本命年。每一个人都怀揣着自己的梦想、希望与抱负，但却走在了一起，11人踏上了历时一年，长达2000公里的朝圣之路。 他们的每个人都有自己的生活追求与梦想，但却又是什么使他们团结得走到一起？是信仰？是，然而又不全是。他们都信仰着藏传佛教，信仰着冈仁波齐，但是因为梦想不同，他们的信念不同，对信仰的看法也不同。 影片中，各个角色都曾发表过自己对上天的看法。有人曾经说过：“自己并没有做过什么对不起人的事情，但是为何自己家盖房子就会死二伤二呢？”这事实上比任何地方的朝圣者都要来的真实，他们反映出信仰者们对信仰的怀疑。之后，又有人说：“磕头磕出血，只能说是你磕得用心，磕得虔诚，是对信仰也是对自己的虔诚。”着表现出来了人们对于信仰怀疑之后的包容。 人，总需要仰望点什么。为梦仰望，为在自己的梦想选择自己的信仰。信仰和梦想，如同诗和远方，诗和信仰，不切实际但给你执着的内心，而梦想和远方，是对未来的渴望与眺望。执着得久，走得越久，望得越远，走得越远。虽然，我们不一定走到了梦想的位置，但他们带动着我们向远方前进。你得远方可以不切实际，可以天马行空，只要你对他有足够虔诚的信仰，并且不忘初心。那么你一定可以到达你意想不到的地方，得到充满惊喜的未来。 在拉萨的拍摄现场，片中朝圣者因为配合拍摄，被其他朝圣者吐口水，一度放弃拍摄。直到一位喇嘛开导：“如果你们觉得做的事是正确的，那又何必害怕别人朝你吐口水呢。”诚然如此，只要你觉得正确，又何必害怕？这个世界上没有什么生活方式是完全正确的，远方不是终点，达不到也不必遗憾，但是我们必须接受平凡的自我，去大胆地想象，去大胆地做，又何必在意或害怕别人的看法呢？著名法国哲学家萨特说过：“他人即地狱”。我们不要因为成为“对象我”而失去对初心的追求。 信仰，可以是任何东西，可以是一个项目，一门技术，一个伟人等等。但它必须超脱功利价值的存在，这样，信仰才会“有趣”。为梦想二存在的信仰才是有价值的。 如同影片中屠夫的赎罪，他要为自己的灵魂的赎罪，这就是对自己价值的提升，所以，他信仰了。 若干年后，我们可能会嘲笑自己幼稚，但是无论如何，为梦仰望，接受平凡而又不甘平凡，努力活出最好的我，不为未来留下遗憾。</summary></entry><entry><title type="html">幕后 第三章</title><link href="/jekyll/update/2017/07/06/%E5%B9%95%E5%90%8E-%E7%AC%AC%E4%B8%89%E7%AB%A0.html" rel="alternate" type="text/html" title="幕后 第三章" /><published>2017-07-06T21:43:00+08:00</published><updated>2017-07-06T21:43:00+08:00</updated><id>/jekyll/update/2017/07/06/%E5%B9%95%E5%90%8E%20%E7%AC%AC%E4%B8%89%E7%AB%A0</id><content type="html" xml:base="/jekyll/update/2017/07/06/%E5%B9%95%E5%90%8E-%E7%AC%AC%E4%B8%89%E7%AB%A0.html">&lt;h1&gt;幕后 第三章&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
坐标：地球-比利时-布鲁塞尔 时间：地球纪元2033年&lt;br /&gt;
这次，自由人重新选择了一个地方作为其总部所在地。这一天，全球几乎所有的大国都坐在一张谈判桌上。自由人经过98年的发展，显然已经超越了联合国，成为了全世界最强的联合组织。&lt;br /&gt;
刘辉是中国方面（也是泛亚太联盟）的协调员。&lt;br /&gt;
这一次紧急召开如此大规模的会议，最主要的目的就是就“如何应对我们的宿主文明”展开讨论。显然，各方的意见也是十分不统一。&lt;br /&gt;
马克·瑟里奇，是北约方面的技术顾问：“如果我的逻辑推论没有疏漏的话。那这个问题就是关乎命运的大问题。我们现在的一举一动都处于宿主文明的监视之下，而我们一切的一切，也不就是他们硬盘中的数据，内存中的程序而以，想要毁灭，简直是在简单不过的事情。为了我们的安全，自由人总部全部被概率云包裹，只要宿主文明不派出观察者，那我们的一举一动都是处于叠加状态的——总而言之，本次会议是绝对安全的。”&lt;br /&gt;
“经过一段时间的研究，我们泛亚太联盟同意宿主文明的存在这一说法。但是作为宿主文明的囊中之物，就是大战爆发，过程当中宿主文明随随便便拔掉电源也不算是不可以。那我们取胜的可能性就很小。如果可以的话，尽量避免大战地发生，即使不可避免，那也得至少是来到宿主文明的世界之后再引发战争，这样我们才可能有胜算。”泛亚太联盟中方军事委员长常磊强说。
“谈判，这简直是太可笑了，我们寄人篱下，活不活着还要看他们脸色，什么时候我们还能讲条件了？”，欧盟理事会主席马修·鲁克斯极尽嘲讽地说。&lt;br /&gt;
“那欧盟你们的意思？”常委员长抱着一种疑惑而不相信的心，严肃但又有所看洋相地问。&lt;br /&gt;
果不其然，欧盟退缩了：“一定要求我们来评判的话，我们更加愿意怀疑研究结果的准确性。我们现在一切的设想与担心都存在于理论报告，很多时候为何一定要纠结得如此之深。”，马修回避道。&lt;br /&gt;
“这也实在是太荒唐了，至少，欧盟的想法我就持反对意见。”，一边从未发言，几乎快要被人忘却的刘辉说：“我们尽量还是要持宁可信有，不可信无的态度，毕竟，我们是在不利位置的。当然，我还是想知道一下北约方面的看法。”说完，刘辉满脸期待地看向马克·瑟里奇。&lt;br /&gt;
的确，北约方面的态度很能决定最终的结局。&lt;br /&gt;
“我们的态度，很显然就是希望能够与宿主文明大战一场，当然并不是硬着来，我们希望找到我们所在的复杂系统的一些漏洞，进入宿主文明的世界，之后毁灭宿主文明。再之后把所有人类转移出来。”，马克·瑟里奇说。&lt;br /&gt;
“那有这方面的线索吗？”，刘辉问。&lt;br /&gt;
常磊说：“如果有大概可行的线索的话，泛亚太方面表示支持”。常磊似乎希望能与北约方面展开合作。&lt;br /&gt;
“漏洞的线索的话，我们有一定完备的理论”，马克·瑟里奇说：“这个理论其实也是我们存在宿主文明的一个证明。当然这方面的理论才刚开始研究。可观察的宇宙可能是一个翻过来的黑洞。也就是说，我们如果能够来到宇宙视界（这个部分存在着我们周围三维全息世界的二维信息）。所以说，这个巨型黑洞的视界可能就是这台计算机的硬盘，我们在那里就可以更改我们的世界，来造成一些系统异常，甚至可能可以来到宿主文明的世界。”&lt;br /&gt;
“但是光速都无法出逃，那我们又如何到达视界表面呢？”马修·鲁克斯问。&lt;br /&gt;
“这个问题问得很好。”马克·瑟里奇说，“所以说这也是我们目前想知道的。”
“当然，目前我们能够制造出一些小型的引力波，而引力波是可以逃出黑洞的，或许，借助这种波浪，我们可以逃出去，只是需要一块靠谱的冲浪板。”&lt;br /&gt;
“我们愿意与北约进行研究”常磊说。&lt;br /&gt;
马修·鲁克斯还是处于不置可否的态度：“既然你们都愿意远征，那我们就留下来保护地球吧。”&lt;br /&gt;
当天，北约就和泛亚太联盟组织了“远征者”太空舰队，而欧盟则是集中力量研究保护地球的措施。&lt;br /&gt;
“如果我们可以出逃，那么就必须是带着地球出逃，所以，我们只有一次机会，当然，我们也希望欧盟能够制造一层坚固的保护罩来保护我们的飞船——地球。”&lt;br /&gt;
“也就是我们要带着地球漂泊？”刘辉说。&lt;br /&gt;
“是的”马克·瑟里奇说。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
坐标：地球-比利时-布鲁塞尔-北约总部 时间：地球纪元2033年&lt;br /&gt;
刘辉与马克·瑟里奇就“远征者”的具体技术细节进行商议。&lt;br /&gt;
“我们首先必须要有一支舰队来为地球这只冲浪板护航。”马克·瑟里奇说。&lt;br /&gt;
“目前我很怀疑我们是否能制造出强大的引力波。因为至少我们的技术实力还处于实验阶段，远远不能支持对整支舰队甚至整个地球的‘冲浪’”刘辉严肃地说。&lt;br /&gt;
“所以我认为我们有必要制造一个非常强大的引力波，但是我们制造不出来”马克·瑟里奇说。&lt;br /&gt;
“那就是需要我们进入黑洞？”刘辉问。&lt;br /&gt;
“也许是的”马克·瑟里奇看起来很轻松，似乎早在他的意料之中。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
坐标：美国-华盛顿·哥伦比亚特区-五角大楼 地球纪元2033年&lt;br /&gt;
五角大楼得知需要进入时。就开始派遣大量人员研究太空舰队。北约方面投入了大量的资金。&lt;br /&gt;
为了能够使飞船内的人员安全存活，这就意味着需要有足够强度的材料来制造整个船体，而且飞船必须具有足够强大的动力，在黑洞表面借助引力波之力迅速飞离，去往遥远的地方寻找引力波来到宇宙这个黑洞的表面。&lt;br /&gt;
事实上，这个项目的核心难点也并不在于材料的强度，而在于飞船引擎能不能在表面达到逃逸速度。所以亚瑟·霍普金斯，汤姆·惠灵顿组成的研究小组展开了这方面的研究。&lt;/p&gt;</content><author><name></name></author><summary type="html">幕后 第三章 坐标：地球-比利时-布鲁塞尔 时间：地球纪元2033年 这次，自由人重新选择了一个地方作为其总部所在地。这一天，全球几乎所有的大国都坐在一张谈判桌上。自由人经过98年的发展，显然已经超越了联合国，成为了全世界最强的联合组织。 刘辉是中国方面（也是泛亚太联盟）的协调员。 这一次紧急召开如此大规模的会议，最主要的目的就是就“如何应对我们的宿主文明”展开讨论。显然，各方的意见也是十分不统一。 马克·瑟里奇，是北约方面的技术顾问：“如果我的逻辑推论没有疏漏的话。那这个问题就是关乎命运的大问题。我们现在的一举一动都处于宿主文明的监视之下，而我们一切的一切，也不就是他们硬盘中的数据，内存中的程序而以，想要毁灭，简直是在简单不过的事情。为了我们的安全，自由人总部全部被概率云包裹，只要宿主文明不派出观察者，那我们的一举一动都是处于叠加状态的——总而言之，本次会议是绝对安全的。” “经过一段时间的研究，我们泛亚太联盟同意宿主文明的存在这一说法。但是作为宿主文明的囊中之物，就是大战爆发，过程当中宿主文明随随便便拔掉电源也不算是不可以。那我们取胜的可能性就很小。如果可以的话，尽量避免大战地发生，即使不可避免，那也得至少是来到宿主文明的世界之后再引发战争，这样我们才可能有胜算。”泛亚太联盟中方军事委员长常磊强说。 “谈判，这简直是太可笑了，我们寄人篱下，活不活着还要看他们脸色，什么时候我们还能讲条件了？”，欧盟理事会主席马修·鲁克斯极尽嘲讽地说。 “那欧盟你们的意思？”常委员长抱着一种疑惑而不相信的心，严肃但又有所看洋相地问。 果不其然，欧盟退缩了：“一定要求我们来评判的话，我们更加愿意怀疑研究结果的准确性。我们现在一切的设想与担心都存在于理论报告，很多时候为何一定要纠结得如此之深。”，马修回避道。 “这也实在是太荒唐了，至少，欧盟的想法我就持反对意见。”，一边从未发言，几乎快要被人忘却的刘辉说：“我们尽量还是要持宁可信有，不可信无的态度，毕竟，我们是在不利位置的。当然，我还是想知道一下北约方面的看法。”说完，刘辉满脸期待地看向马克·瑟里奇。 的确，北约方面的态度很能决定最终的结局。 “我们的态度，很显然就是希望能够与宿主文明大战一场，当然并不是硬着来，我们希望找到我们所在的复杂系统的一些漏洞，进入宿主文明的世界，之后毁灭宿主文明。再之后把所有人类转移出来。”，马克·瑟里奇说。 “那有这方面的线索吗？”，刘辉问。 常磊说：“如果有大概可行的线索的话，泛亚太方面表示支持”。常磊似乎希望能与北约方面展开合作。 “漏洞的线索的话，我们有一定完备的理论”，马克·瑟里奇说：“这个理论其实也是我们存在宿主文明的一个证明。当然这方面的理论才刚开始研究。可观察的宇宙可能是一个翻过来的黑洞。也就是说，我们如果能够来到宇宙视界（这个部分存在着我们周围三维全息世界的二维信息）。所以说，这个巨型黑洞的视界可能就是这台计算机的硬盘，我们在那里就可以更改我们的世界，来造成一些系统异常，甚至可能可以来到宿主文明的世界。” “但是光速都无法出逃，那我们又如何到达视界表面呢？”马修·鲁克斯问。 “这个问题问得很好。”马克·瑟里奇说，“所以说这也是我们目前想知道的。” “当然，目前我们能够制造出一些小型的引力波，而引力波是可以逃出黑洞的，或许，借助这种波浪，我们可以逃出去，只是需要一块靠谱的冲浪板。” “我们愿意与北约进行研究”常磊说。 马修·鲁克斯还是处于不置可否的态度：“既然你们都愿意远征，那我们就留下来保护地球吧。” 当天，北约就和泛亚太联盟组织了“远征者”太空舰队，而欧盟则是集中力量研究保护地球的措施。 “如果我们可以出逃，那么就必须是带着地球出逃，所以，我们只有一次机会，当然，我们也希望欧盟能够制造一层坚固的保护罩来保护我们的飞船——地球。” “也就是我们要带着地球漂泊？”刘辉说。 “是的”马克·瑟里奇说。 坐标：地球-比利时-布鲁塞尔-北约总部 时间：地球纪元2033年 刘辉与马克·瑟里奇就“远征者”的具体技术细节进行商议。 “我们首先必须要有一支舰队来为地球这只冲浪板护航。”马克·瑟里奇说。 “目前我很怀疑我们是否能制造出强大的引力波。因为至少我们的技术实力还处于实验阶段，远远不能支持对整支舰队甚至整个地球的‘冲浪’”刘辉严肃地说。 “所以我认为我们有必要制造一个非常强大的引力波，但是我们制造不出来”马克·瑟里奇说。 “那就是需要我们进入黑洞？”刘辉问。 “也许是的”马克·瑟里奇看起来很轻松，似乎早在他的意料之中。 坐标：美国-华盛顿·哥伦比亚特区-五角大楼 地球纪元2033年 五角大楼得知需要进入时。就开始派遣大量人员研究太空舰队。北约方面投入了大量的资金。 为了能够使飞船内的人员安全存活，这就意味着需要有足够强度的材料来制造整个船体，而且飞船必须具有足够强大的动力，在黑洞表面借助引力波之力迅速飞离，去往遥远的地方寻找引力波来到宇宙这个黑洞的表面。 事实上，这个项目的核心难点也并不在于材料的强度，而在于飞船引擎能不能在表面达到逃逸速度。所以亚瑟·霍普金斯，汤姆·惠灵顿组成的研究小组展开了这方面的研究。</summary></entry><entry><title type="html">幕后 第二章</title><link href="/jekyll/update/2017/07/05/%E5%B9%95%E5%90%8E-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html" rel="alternate" type="text/html" title="幕后 第二章" /><published>2017-07-05T13:31:00+08:00</published><updated>2017-07-05T13:31:00+08:00</updated><id>/jekyll/update/2017/07/05/%E5%B9%95%E5%90%8E%20%E7%AC%AC%E4%BA%8C%E7%AB%A0</id><content type="html" xml:base="/jekyll/update/2017/07/05/%E5%B9%95%E5%90%8E-%E7%AC%AC%E4%BA%8C%E7%AB%A0.html">&lt;h1&gt;幕后 第二章&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
坐标：GN-z11星系-GNR-《宇宙》与S-M系统控制中心 时间：GN纪元后世代26941年&lt;br /&gt;
S-M的设计和维护团队，《宇宙》系统的设计团队，以及元首一同在控制中心的会议室中。&lt;br /&gt;
“诸位，根据我们的日志显示，人类正在逐渐意识到整个《宇宙》系统的存在，似乎也间接认识到，我们作为第二个上帝，造世主一般的存在。”S-M的总架构设计师道，显然，S-M在对于如此重要而矛盾的处理上很是力不从心。&lt;br /&gt;
“那目前有威胁到宇宙的保护系统吗？”似乎，《宇宙》团队更加关心这个问题。&lt;br /&gt;
“并没有，他们目前还没有能够飞出太阳系的技术能力，所以目前来说很安全。但是，虽然他们无法在系统中闹出一番大动静，但是，既然他们意识到了我们的存在，我觉得，为了安全考虑应该扼杀人类。”S-M的安全顾问说。&lt;br /&gt;
话音刚落，《宇宙》的总设计师忽然跃起，猛地一敲桌子，咆哮到：“你们这群搞AI的是被机器人三大定律（Three Laws of Robotics,阿西莫夫于1950年提出的，用于保护人类）冲昏头脑了吗？你知道人类目前的发展状态是我们花费多少时间培养的吗？难道我们要为一个不一定存在——不，是根本不存在的威胁而放弃我们的希望吗？我和你们S-M团队坦言吧，我敢保证我们《宇宙》的安全系统是可靠的，是利益最大化的，你这是对我们《宇宙》系统的极度不信任！你们会——”&lt;br /&gt;
“闭嘴！”，元首低沉而有力地说。回声在会议室不断地回荡。&lt;br /&gt;
瞬间，安静了。&lt;br /&gt;
“我想，诸位都没有资格判断对错，唯有时间能够检验，但是，就目前看来，《宇宙》系统却是花费了我们大量的心血。如果扼杀了人类，我们就相当于毁了它。《宇宙》是一件无与伦比，精妙绝伦的艺术品，我们不能因为一粒灰尘的玷污而把它摔碎。”&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
坐标：地球-美国-华盛顿·哥伦比亚特区-NASA总部休息室 时间：地球纪元公元后2032年&lt;br /&gt;
Mark·Surridge（马克·瑟里奇）、Arthur·Hopekins（亚瑟·霍普金斯）、Tom·Herrington（汤姆·惠灵顿）三人坐在休息室里。三个人同时在2025年加入了自由人，同时，也都是NASA远空观测分部的物理与天文顾问。其中，亚瑟毕业于SU（Singularity University,奇点大学，位于美国加州硅谷，由Google和NASA合办），另外两人毕业于MIT（Massachusetts Institute of Technology，麻省理工）。&lt;br /&gt;
“还记得19年前扎克伯格的演讲吗？听起来还有趣。”，马克说道。&lt;br /&gt;
“但是，我觉得这似乎并不能证明真假，如果存在这样的文明，而我们只是生活在他们创造的游戏之中的话，那他们的世界就一定是客观的吗？是不是存在更高级的文明将他们模拟？这就像《盗梦空间》中递归般的梦境一般。”亚瑟说道。&lt;br /&gt;
“我还能再证明你这个命题的不正确性，就如我们所知道的一样，宇宙中所有的能量都是沿着最短路径传播的，但是，假设这个世界是由计算机模拟的，那谁来模拟他们？这不就是背离了最短路径的原则吗？所以，我认为宇宙并不应该如此设计。”亚瑟接着说。&lt;br /&gt;
“那我认为你就错了，亚瑟，我们现在的物理规则都可以是他们设计出来的，而并不是真实的，就像魔兽争霸里的任务要是有思想的话，他们会是多么的违反我们的物理定律，但是这碍事吗？并不妨碍，只要宿主机——也就是模拟我们的计算机——或者说随便是什么物质，只要能够符合他们的物理定律并且能够兼容出我们的物理定律，那就是合理的。”马克说。&lt;br /&gt;
“那他们能够使用各种各样架构的计算机啊，为什么一定要是我们的经典图灵机？”，汤姆反问道。&lt;br /&gt;
“如果，我们的世界就是最上层——也就是我们没有被模拟。但是，我们现在的计算机架构在性能无限强大的情况下时是可以模拟出现在我们的世界的，况且，我们的世界有被模拟的迹象——只要他们的计算机能兼容我们的物理定律，所以，我们的世界一定被模拟，并且可能有多种方法来模拟，这就意味着，上层文明可以有着无限可能。这恰恰更加危险。”，马克回应道。&lt;br /&gt;
两个人思考了一段时间，沉默不语，似乎默认了。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
坐标：地球-美国-门罗帕克 时间：地球纪元公元后2032年&lt;br /&gt;
19年前扎克伯格提出的设想深入每个自由人的心魂之中。Demis Hassabis（杰米斯·哈萨比斯，DeepMind创始人，AlphaGo缔造者，AI从事者心中的偶像）在自由人的总部感叹道：“为什么要有计算机呢？或许，我们知道的太多了，我们拥有了强大的力量，可以去约束世界，可以成为上帝。但是，我们拥有如此强大的力量，却为自己设了一个，迷——我们究竟是不是客观存在的呢？” &lt;br /&gt;
“太多时候，我们以为我们就快到达，却发现转角又是一条无尽且泥泞的道路，我们何时才能走到头啊，或许，全人类都已经累了。” &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
坐标：地球-美国-华盛顿·哥伦比亚特区-五角大楼 时间：地球纪元后2033年&lt;br /&gt;
这一天，马克·瑟里奇等三人向自由人总部提交了扎克伯格猜想的进一步论证，这原本的恐惧感离每个自由人心中都越来越近，越来越真实。&lt;br /&gt;
终于，自由人决定将报告提交给三个自由人主要缔约组织的政府：北约、欧盟以及泛亚太联盟。&lt;br /&gt;
为了避免不必要的慌张。三个组织并没有将研究报告公之于众，而是作为绝密档案封存。同时紧急成立了专门的委员会。将各国各个领域的尖端人才全部云集于此。&lt;br /&gt;
“现在，你们要完成一件永远不可能完成的任务，而且是在一个不可能的期限之内，此外，记住，世界的存亡寄托在你们身上。”&lt;/p&gt;</content><author><name></name></author><summary type="html">幕后 第二章 坐标：GN-z11星系-GNR-《宇宙》与S-M系统控制中心 时间：GN纪元后世代26941年 S-M的设计和维护团队，《宇宙》系统的设计团队，以及元首一同在控制中心的会议室中。 “诸位，根据我们的日志显示，人类正在逐渐意识到整个《宇宙》系统的存在，似乎也间接认识到，我们作为第二个上帝，造世主一般的存在。”S-M的总架构设计师道，显然，S-M在对于如此重要而矛盾的处理上很是力不从心。 “那目前有威胁到宇宙的保护系统吗？”似乎，《宇宙》团队更加关心这个问题。 “并没有，他们目前还没有能够飞出太阳系的技术能力，所以目前来说很安全。但是，虽然他们无法在系统中闹出一番大动静，但是，既然他们意识到了我们的存在，我觉得，为了安全考虑应该扼杀人类。”S-M的安全顾问说。 话音刚落，《宇宙》的总设计师忽然跃起，猛地一敲桌子，咆哮到：“你们这群搞AI的是被机器人三大定律（Three Laws of Robotics,阿西莫夫于1950年提出的，用于保护人类）冲昏头脑了吗？你知道人类目前的发展状态是我们花费多少时间培养的吗？难道我们要为一个不一定存在——不，是根本不存在的威胁而放弃我们的希望吗？我和你们S-M团队坦言吧，我敢保证我们《宇宙》的安全系统是可靠的，是利益最大化的，你这是对我们《宇宙》系统的极度不信任！你们会——” “闭嘴！”，元首低沉而有力地说。回声在会议室不断地回荡。 瞬间，安静了。 “我想，诸位都没有资格判断对错，唯有时间能够检验，但是，就目前看来，《宇宙》系统却是花费了我们大量的心血。如果扼杀了人类，我们就相当于毁了它。《宇宙》是一件无与伦比，精妙绝伦的艺术品，我们不能因为一粒灰尘的玷污而把它摔碎。” 坐标：地球-美国-华盛顿·哥伦比亚特区-NASA总部休息室 时间：地球纪元公元后2032年 Mark·Surridge（马克·瑟里奇）、Arthur·Hopekins（亚瑟·霍普金斯）、Tom·Herrington（汤姆·惠灵顿）三人坐在休息室里。三个人同时在2025年加入了自由人，同时，也都是NASA远空观测分部的物理与天文顾问。其中，亚瑟毕业于SU（Singularity University,奇点大学，位于美国加州硅谷，由Google和NASA合办），另外两人毕业于MIT（Massachusetts Institute of Technology，麻省理工）。 “还记得19年前扎克伯格的演讲吗？听起来还有趣。”，马克说道。 “但是，我觉得这似乎并不能证明真假，如果存在这样的文明，而我们只是生活在他们创造的游戏之中的话，那他们的世界就一定是客观的吗？是不是存在更高级的文明将他们模拟？这就像《盗梦空间》中递归般的梦境一般。”亚瑟说道。 “我还能再证明你这个命题的不正确性，就如我们所知道的一样，宇宙中所有的能量都是沿着最短路径传播的，但是，假设这个世界是由计算机模拟的，那谁来模拟他们？这不就是背离了最短路径的原则吗？所以，我认为宇宙并不应该如此设计。”亚瑟接着说。 “那我认为你就错了，亚瑟，我们现在的物理规则都可以是他们设计出来的，而并不是真实的，就像魔兽争霸里的任务要是有思想的话，他们会是多么的违反我们的物理定律，但是这碍事吗？并不妨碍，只要宿主机——也就是模拟我们的计算机——或者说随便是什么物质，只要能够符合他们的物理定律并且能够兼容出我们的物理定律，那就是合理的。”马克说。 “那他们能够使用各种各样架构的计算机啊，为什么一定要是我们的经典图灵机？”，汤姆反问道。 “如果，我们的世界就是最上层——也就是我们没有被模拟。但是，我们现在的计算机架构在性能无限强大的情况下时是可以模拟出现在我们的世界的，况且，我们的世界有被模拟的迹象——只要他们的计算机能兼容我们的物理定律，所以，我们的世界一定被模拟，并且可能有多种方法来模拟，这就意味着，上层文明可以有着无限可能。这恰恰更加危险。”，马克回应道。 两个人思考了一段时间，沉默不语，似乎默认了。 坐标：地球-美国-门罗帕克 时间：地球纪元公元后2032年 19年前扎克伯格提出的设想深入每个自由人的心魂之中。Demis Hassabis（杰米斯·哈萨比斯，DeepMind创始人，AlphaGo缔造者，AI从事者心中的偶像）在自由人的总部感叹道：“为什么要有计算机呢？或许，我们知道的太多了，我们拥有了强大的力量，可以去约束世界，可以成为上帝。但是，我们拥有如此强大的力量，却为自己设了一个，迷——我们究竟是不是客观存在的呢？” “太多时候，我们以为我们就快到达，却发现转角又是一条无尽且泥泞的道路，我们何时才能走到头啊，或许，全人类都已经累了。” 坐标：地球-美国-华盛顿·哥伦比亚特区-五角大楼 时间：地球纪元后2033年 这一天，马克·瑟里奇等三人向自由人总部提交了扎克伯格猜想的进一步论证，这原本的恐惧感离每个自由人心中都越来越近，越来越真实。 终于，自由人决定将报告提交给三个自由人主要缔约组织的政府：北约、欧盟以及泛亚太联盟。 为了避免不必要的慌张。三个组织并没有将研究报告公之于众，而是作为绝密档案封存。同时紧急成立了专门的委员会。将各国各个领域的尖端人才全部云集于此。 “现在，你们要完成一件永远不可能完成的任务，而且是在一个不可能的期限之内，此外，记住，世界的存亡寄托在你们身上。”</summary></entry><entry><title type="html">幕后 第一章</title><link href="/jekyll/update/2017/07/04/%E5%B9%95%E5%90%8E-%E7%AC%AC%E4%B8%80%E7%AB%A0.html" rel="alternate" type="text/html" title="幕后 第一章" /><published>2017-07-04T13:34:00+08:00</published><updated>2017-07-04T13:34:00+08:00</updated><id>/jekyll/update/2017/07/04/%E5%B9%95%E5%90%8E%20%E7%AC%AC%E4%B8%80%E7%AB%A0</id><content type="html" xml:base="/jekyll/update/2017/07/04/%E5%B9%95%E5%90%8E-%E7%AC%AC%E4%B8%80%E7%AB%A0.html">&lt;h1&gt;幕后 第一章&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;我现在做的事情，要么毫无意义，要么可能成为牛顿以后物理学上最大的发现。&lt;br /&gt;
——马克思·普朗克&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;坐标：地球-德国-亥姆霍兹研究所 时间：地球纪元公元后1900年&lt;br /&gt;
这一年对于马克斯·普朗克来说具有非同寻常的意义，同样对人类也是。的确，马克斯·普朗克真的要作出牛顿以来物理学上最大的发现。这似乎发现的很是不同寻常。&lt;br /&gt;
庄子云：“一尺之棰，日取其半，万世不竭。”。早在庄子的时代，人类就发现，物体的运动是连续的，物体的性质变化也是连续的，即所有物质的性质都可以无限细分下去。&lt;br /&gt;
然而，到了原子以下的世界，马克斯·普朗克意识到了一些不寻常的变化——物质的能量不再是连续的了，变成了不可分割且分立的量子。&lt;br /&gt;
这个有悖与常识的发现令马克斯·普朗克十分不解。他甚至希望能够推翻自己的发现，不要让它成为现实。但是，多次实验的结果加上马克斯·普朗克敏锐的直觉告诉他：事实便为如此。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
坐标：地球-德国 时间：地球纪元公元后1905年&lt;br /&gt;
这一年，爱因斯坦提出了《狭义相对论》，并且给出了著名的E=mc^2。《狭义相对论》中有重要的一条就是光速不变原理，且光速并非无限大的。此外，有趣的是，爱因斯坦还发现了光的波粒二象性。之后的1915年，爱因斯坦提出了《广义相对论》。《广义相对论》认为，因为物质的存在，时间和空间都会发生扭曲，这也就是引力场。&lt;br /&gt;
普朗克常数否决了宇宙可以无限分割的想法，而爱因斯坦的相对论则说明了光速的确定性且并非无限大，以及时间和空间的不稳定性。这一切超出常人思维理解能力的发现几乎颠覆者全人类的世界观，甚至两位发现者都有些难以置信。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
坐标：地球-德国-慕尼黑 时间：地球纪元公元后1935年&lt;br /&gt;
1927年，海森堡提出了不确定性理论，这个理论基于的是爱因斯坦提出的波粒二象性，随后的1935年，薛定谔提出了“薛定谔的猫”的理想实验，将海森堡提出的微观下的不确定性理论转为了宏观上更容易理解的假象，更是印证了不确定性理论。&lt;/p&gt;

&lt;p&gt;随着这一切的不合乎常理但却又是准确无误的理论提出，四位具有伟大突破的物理学家来到了德国慕尼黑的圣母教堂。三个人在马克斯·普朗克的带领下径直向前走去，似乎有也没有目的，很是让人心生疑惑。&lt;br /&gt;
突然，马克斯猛地一转身把三个人带入了一个小房间，然后“当——”得一声关上了门，又迅速把门锁上。&lt;br /&gt;
“我这次把你们叫来是要组建一个秘密的组织——当然，并不是宗教方面的，这是关于客观世界的——但是，因为是一个秘密组织，所以，用宗教的外表来遮人耳目也不是不可以。”马克斯·普朗克说道：“我现在做的事情，也是你们现在所做的事情，要么毫无意义——很显然是有意义的，所以这一切将成为牛顿以后物理学上最大的发现，甚至，我们发现的并不再局限于物理了，它可能会改变人类的命运——当然，是祸是福，我们还不知道。”&lt;br /&gt;
“量子力学”，爱因斯坦道。&lt;br /&gt;
“是，但不仅仅是，诸位难道不觉得我们的发现正在问鼎上帝创造的宇宙的边界吗？我们的理论和发现正在一步步接近宇宙的终极，也是我们的终极，正在接近那个终极的答案。”普朗克说：“我们正在一步步推翻祖先所设想的，我们会比他们想得更清晰，更简洁，更透彻。”&lt;br /&gt;
薛定谔与海森堡点点头，思索了一会。&lt;br /&gt;
海森堡说：“那，我们要保守的秘密是什么？”。三个人眼中都充满疑惑，等待着马克斯的解释。&lt;br /&gt;
“我觉得，上帝如此告诉我们，宇宙有限，他的意图很明显——想让我们去接管这个世界。”&lt;br /&gt;
“但是，很明显，我们现在的能力很不合适，难道不是吗？我们都无法问鼎月球，还停留在Science Fiction（SF，即科学幻想或科学小说）中。”薛定谔说，似乎有点浇冷水的意味。&lt;br /&gt;
“你想的很好，也很超前，但是，这就是这个秘密组织的意义所在，我们可以一直发展下去，直到称霸宇宙的那一天到来。”马克斯道：“如果诸位有谁不想为人类的未来着想——我想没有一个科学家会这样吧，可以现在就离开，因为你不适合人类的未来，不配用量子力学与上帝对话。如果没有的话，那我们继续吧！”&lt;br /&gt;
三个人点点头，示意继续。&lt;br /&gt;
“既然你们都同意，那从今天起，我们都是‘自由人’的成员了，你们也作为最初的四名组织创始人。”，马克斯·普朗克说。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
坐标：地球-美国-门罗帕克 时间：地球纪元公元后2013年&lt;br /&gt;
此时，自由人已经有百余名成员了，全是各界的名人，西方的一些政客也涉足其中。其中，科技界的人士也不在少数，如：理查德·斯托曼，马克·扎克伯格，拉里·佩奇等。&lt;br /&gt;
这一次在门罗帕克召开的是自由人四年一次的长期会议。&lt;br /&gt;
会议的开头重述了自由人的思想意识形态以及目标。这是每一次的长期会议都会有的。&lt;br /&gt;
然而中段一些高级顾问的汇报演讲有些独具一些趣味性。扎克伯格作为高级顾问，也发表了演讲。&lt;br /&gt;
“今天，我要告诉大家一个残酷且严肃的事实。我们可能生活在梦中，我们可能正在意识到梦魇的发生与出现，随时可以被别人所轻而易举地抹杀。而且，似乎我们有足够的理由。”扎克伯格道：“我认为我们在一个计算机模拟的‘游戏’中。我们知道，在计算机中保存浮点数并非真正的实数，而是离散的i.e.存在最小的在正浮点数。我们的宇宙也是如此，早在1900年，马克斯·普朗克发现普朗克常数并推生出量子力学时，就意味着我们的世界并不是无限可分的，而是存在最小的i.e.普朗克常数。”&lt;br /&gt;
“编写过大型游戏的都知道，为我们不可能在同时预处理和渲染所有的画面，为了性能，我们通常把玩家非关注的部分作优化处理，而玩家聚焦的部分精确渲染与绘制。如果第一个观点是正确的话——也就是说，我们的世界是渲染的，那就意味系统的计算能力有限，那它应该会采用这种优化方式。的确，它采用了，有力的证明就是光的波粒二象性，当我们观察时，根据不确定性理论，光会精确变成粒子模型，而当我们不关注时，系统会用简单的波动模型来渲染，以节省能耗。”&lt;br /&gt;
“最后一点证明也是最简单的，我们知道，任何一台计算机具有运算上限，这也就是所谓的光速存在的理由，这是一个硬伤，当然从一种角度来说，也保护了系统。”扎克伯格说：“虽然，我们处境不容乐观，但是，我们还没有到灭绝的地步，因为设计这个系统的文明还没有强大到如此般的地步。而且，我们既然存在，这就意味着系统很早就该发现我们的想法——他们具有上帝视角，因此，我们可以继续发展，只要在这个系统内扩张，我们都不会有太大的问题。但我们必须紧张起来。这是自由人以及整个人类的关键节点——我们发现了另一个文明，不是他死，就是我亡。”&lt;/p&gt;</content><author><name></name></author><summary type="html">幕后 第一章 我现在做的事情，要么毫无意义，要么可能成为牛顿以后物理学上最大的发现。 ——马克思·普朗克</summary></entry></feed>