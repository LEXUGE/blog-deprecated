---
layout: default
title:  "RSA密钥生成（C语言）"
date:   2016-10-01 09:43
categories: jekyll update
---
> RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。
RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。
今天只有短的RSA钥匙才可能被强力方式解破。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。但在分布式计算和量子计算机理论日趋成熟的今天，RSA加密安全性受到了挑战。
RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。

下面是代码实现

```c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int start();
int f(int m,int n);
int prime(int n);

int prime(int n)
{
  int i=0;
  for (i=2;i*i<=n;i++)
    if (n%i==0) return 0;
  return 1;
}
int f(int m,int n)
{
  int c=0;
  c=m%n;
  while (c!=0)
  {
    m=n;n=c;c=m%n;
  }
  return(n);
}
int start()
{
  int temp=0,p=0,q=0,n=0,l=0,e=0,d=0;
  printf("RSA tool\n");
  printf("please input two prime number:");
  scanf("%d %d",&p,&q);
  if ((prime(p)!=1)||(prime(q)!=1)) {printf("number(s) is(are) not the prime number!\n");exit(0);}
  n=p*q;
  l=(p-1)*(q-1)/f(p-1,q-1);
  srand((unsigned)time(NULL));
  while (1)
  {
    temp=(rand()%(l-4))+2;
    if (f(l,temp)==1) {e=temp;break;}
  }
  printf("(E,N)=(%d,%d)\n",e,n);
  while (1)
  {
    srand((unsigned)time(NULL));
    temp=(rand()%(l-4))+2;
    if (((temp*e)%l==1)&&(temp!=e)) {d=temp;break;}
  }

  printf("(D,N)=(%d,%d)\n",d,n);
  return 0;
}

int main()
{
  start();
  return 0;
}
```

